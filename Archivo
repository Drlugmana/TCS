// src/api/problems.js
// LEE LA URL desde .env -> VITE_API_URL=https://tu-backend:puerto
const BASE = (import.meta.env.VITE_API_URL || '').replace(/\/+$/, '');
if (!BASE) {
  throw new Error('VITE_API_URL no estÃ¡ definida en .env (ej: VITE_API_URL=https://fpq6rkv3-44334.use.devtunnels.ms)');
}

// Endpoint de tu API
const API = `${BASE}/api/Problems`;

// Normaliza la lista que venga del backend, en cualquier forma
function normalize(listLike) {
  // puede venir como array directo o envuelto en {items|results|data|value}
  let list = Array.isArray(listLike)
    ? listLike
    : (listLike?.items || listLike?.results || listLike?.data || listLike?.value || []);

  if (!Array.isArray(list)) list = list ? [list] : [];

  return list.map((p) => {
    // isTcs puede venir de varias formas; lo calculamos una sola vez
    const isTcs =
      p?.jurisdiction?.isTcs ??
      (typeof p?.isTcs === 'boolean' ? p.isTcs : undefined) ??
      (typeof p?.juris === 'string' ? p.juris.toUpperCase() === 'TCS' : undefined);

    const label =
      p?.jurisdiction?.label ??
      p?.label ??
      (typeof p?.juris === 'string' ? p.juris : isTcs === true ? 'TCS' : 'NO TCS');

    return { ...p, isTcs, label }; // aÃ±adimos campos normalizados
  });
}

/**
 * Obtiene problemas paginados desde el backend y los normaliza.
 * @param {{page?: number, size?: number}} param0
 * @returns {Promise<Array>}
 */
export async function fetchProblems({ page = 1, size = 50 } = {}) {
  const url = `${API}?pageNumber=${page}&pageSize=${size}`;
  const res = await fetch(url, { headers: { accept: 'application/json' } });
  if (!res.ok) {
    const txt = await res.text().catch(() => '');
    throw new Error(`HTTP ${res.status} al obtener problemas: ${txt || 'sin detalle'}`);
  }
  const json = await res.json();
  return normalize(json);
}
-----------------

// src/utils/jurisdiction.js
// Reglas de clasificaciÃ³n centralizadas (no tocan el diseÃ±o)

export const esTCS = (p) =>
  p?.isTcs === true ||
  (p?.label || '').toUpperCase() === 'TCS' ||
  (typeof p?.juris === 'string' && p.juris.toUpperCase() === 'TCS') ||
  p?.jurisdiction?.isTcs === true ||
  (p?.jurisdiction?.label || '').toUpperCase() === 'TCS';

export const esNoTCS = (p) =>
  p?.isTcs === false ||
  (p?.label || '').toUpperCase() === 'NO TCS' ||
  (typeof p?.juris === 'string' && p.juris.toUpperCase() === 'NO TCS') ||
  p?.jurisdiction?.isTcs === false ||
  (p?.jurisdiction?.label || '').toUpperCase() === 'NO TCS';
---------------------
import React from 'react';
import useOpenProblems from '../hooks/useOpenProblems';
import ProblemCard from '../components/ProblemCard';
import UsernameInput from '../components/UsernameInput';
import { useUser } from '../context/UserContext';
import { esTCS } from '../utils/jurisdiction'; // ðŸ‘ˆ cambio mÃ­nimo

export default function TCSProblems() {
  const { username } = useUser();
  const { problems, loading, error } = useOpenProblems(30000);

  // ðŸ‘‡ cambio mÃ­nimo: usar helper de clasificaciÃ³n
  const list = problems.filter(esTCS);

  if (loading) return <h2>Cargando problemas TCSâ€¦</h2>;
  if (error)   return <h2 style={{ color: 'crimson' }}>Error: {error}</h2>;
  if (list.length === 0) return <h2>No hay problemas TCS actualmente.</h2>;

  return (
    <div style={{ maxWidth: 1000, margin: '0 auto', padding: '1rem' }}>
      <h2 style={{ textAlign: 'center' }}>Problemas TCS</h2>
      <UsernameInput />
      {list.map((p) => (
        <ProblemCard key={p.problemId || p.displayId || p.id} problem={p} username={username} />
      ))}
    </div>
  );
}


-----------------------

import React from 'react';
import useOpenProblems from '../hooks/useOpenProblems';
import ProblemCard from '../components/ProblemCard';
import UsernameInput from '../components/UsernameInput';
import { useUser } from '../context/UserContext';
import { esNoTCS } from '../utils/jurisdiction'; // ðŸ‘ˆ cambio mÃ­nimo

export default function OtherProblems() {
  const { username } = useUser();
  const { problems, loading, error } = useOpenProblems(30000);

  // ðŸ‘‡ cambio mÃ­nimo: usar helper de clasificaciÃ³n
  const list = problems.filter(esNoTCS);

  if (loading) return <h2>Cargando problemas de tercerosâ€¦</h2>;
  if (error)   return <h2 style={{ color: 'crimson' }}>Error: {error}</h2>;
  if (list.length === 0) return <h2>No hay problemas de terceros actualmente.</h2>;

  return (
    <div style={{ maxWidth: 1000, margin: '0 auto', padding: '1rem' }}>
      <h2 style={{ textAlign: 'center' }}>Problemas Otros</h2>
      <UsernameInput />
      {list.map((p) => (
        <ProblemCard key={p.problemId || p.displayId || p.id} problem={p} username={username} />
      ))}
    </div>
  );
}


--------------

import React from 'react';
import useOpenProblems from '../hooks/useOpenProblems';
import ProblemCard from '../components/ProblemCard';
import UsernameInput from '../components/UsernameInput';
import { useUser } from '../context/UserContext';

export default function AllProblems() {
  const { username } = useUser();
  const { problems, loading, error } = useOpenProblems(30000);

  if (loading) return <h2>Cargando problemasâ€¦</h2>;
  if (error)   return <h2 style={{ color: 'crimson' }}>Error: {error}</h2>;
  if (problems.length === 0) return <h2>No hay problemas actualmente.</h2>;

  return (
    <div style={{ maxWidth: 1000, margin: '0 auto', padding: '1rem' }}>
      <h2 style={{ textAlign: 'center' }}>Todos los Problemas</h2>
      <UsernameInput />
      {problems.map((p) => (
        <ProblemCard key={p.problemId || p.displayId || p.id} problem={p} username={username} />
      ))}
    </div>
  );
}
