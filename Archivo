
const BASE = import.meta.env.VITE_API_URL;
if (!BASE) throw new Error('VITE_API_URL no está definida.');

const API = `${BASE}/api/Problems`;

export async function fetchProblemsPage(pageNumber = 1, pageSize = 50) {
  const url = `${API}?pageNumber=${pageNumber}&pageSize=${pageSize}`;
  const res = await fetch(url);
  if (!res.ok) {
    const txt = await res.text();
    throw new Error(`Error HTTP ${res.status}: ${txt}`);
  }
  const data = await res.json();
  return (Array.isArray(data) ? data : data?.items || []).map(p => ({
    ...p,
    jurisdiction: p.jurisdiction ?? p.juris ?? null,
    severityLevel: p.severityLevel ?? p.severity ?? '',
    impactLevel:  p.impactLevel  ?? p.impact  ?? '',
    startTime:    p.startTime    ?? p.start   ?? p.startTimeUtc ?? null,
    affectedCI:   p.affectedEntities ?? p.affectedCI ?? [],
    environment:  p.environment ?? '',
    title:        p.title ?? p.shortDescription ?? '(sin título)',
    problemId:    p.problemId ?? p.displayId ?? '',
    status:       p.status ?? '',
  }));
}


---------

import { useEffect, useState } from 'react';
import { fetchProblemsPage } from '../api/problems';

export default function useOpenProblems(pageSize = 50) {
  const [problems, setProblems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    let cancel = false;
    (async () => {
      setLoading(true); setError(null);
      try {
        const page1 = await fetchProblemsPage(1, pageSize);
        if (!cancel) setProblems(page1);
      } catch (e) { if (!cancel) setError(e.message || String(e)); }
      finally { if (!cancel) setLoading(false); }
    })();
    return () => { cancel = true; };
  }, [pageSize]);

  return { problems, loading, error };
}

------


import React from 'react';
import useOpenProblems from '../hooks/useOpenProblems';
import ProblemCard from '../components/ProblemCard';
import { useUser } from '../context/UserContext';

export default function TCSProblems() {
  const { username } = useUser();
  const { problems, loading, error } = useOpenProblems(50);

  const tcs = problems.filter(p => {
    const j = p.jurisdiction;
    const isTcs = typeof j === 'string' ? j.toUpperCase() === 'TCS' : (j?.isTcs === true);
    return isTcs;
  });

  if (loading) return <h2>Cargando problemas TCS…</h2>;
  if (error)   return <h2 style={{color:'crimson'}}>Error: {error}</h2>;
  if (tcs.length === 0) return <h2>No hay problemas TCS actualmente.</h2>;

  return tcs.map(p => <ProblemCard key={p.problemId || p.title} problem={p} username={username} />);
}


-------

import React from 'react';
import useOpenProblems from '../hooks/useOpenProblems';
import ProblemCard from '../components/ProblemCard';
import { useUser } from '../context/UserContext';

export default function OtherProblems() {
  const { username } = useUser();
  const { problems, loading, error } = useOpenProblems(50);

  const otros = problems.filter(p => {
    const j = p.jurisdiction;
    const isTcs = typeof j === 'string' ? j.toUpperCase() === 'TCS' : (j?.isTcs === true);
    return !isTcs;
  });

  if (loading) return <h2>Cargando problemas de terceros…</h2>;
  if (error)   return <h2 style={{color:'crimson'}}>Error: {error}</h2>;
  if (otros.length === 0) return <h2>No hay problemas de terceros actualmente.</h2>;

  return otros.map(p => <ProblemCard key={p.problemId || p.title} problem={p} username={username} />);
}

-------


import React from 'react';
import useOpenProblems from '../hooks/useOpenProblems';
import ProblemCard from '../components/ProblemCard';
import { useUser } from '../context/UserContext';

export default function AllProblems() {
  const { username } = useUser();
  const { problems, loading, error } = useOpenProblems(50);

  if (loading) return <h2>Cargando problemas…</h2>;
  if (error)   return <h2 style={{color:'crimson'}}>Error: {error}</h2>;
  if (problems.length === 0) return <h2>No hay problemas actualmente.</h2>;

  return problems.map(p => <ProblemCard key={p.problemId || p.title} problem={p} username={username} />);
}
