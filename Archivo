using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using ReporteCoberturaSLA.Models.EntityModels;
using System.Collections.Concurrent;

namespace ReporteCoberturaSLA.DAL
{

    public class EntitiesDB
    {
        private string _connectionString;

        public EntitiesDB(string connectionString)
        {
            _connectionString = connectionString;
        }

        public async Task<List<EntitySchema>> GetEntities2(string name)
        {
            var entities = new List<EntitySchema>();

            using var connection = new SqlConnection(_connectionString);
            await connection.OpenAsync();

            const string query = @"SELECT EntityId, Environment, Tenant, DisplayName, FirstSeen, LastSeen, 
                           Type, ManagementZones, Properties, Tags FROM DynatraceMonitoredEntities
                           WHERE DisplayName LIKE @DisplayName";

            using var command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("@DisplayName", "%" + name + "%");

            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                var entityDb = new EntityDb
                {
                    EntityId = reader.GetString(0),
                    Environment = reader.GetString(1),
                    Tenant = reader.GetString(2),
                    DisplayName = reader.GetString(3),
                    FirstSeen = reader.GetDateTime(4),
                    LastSeen = reader.GetDateTime(5),
                    Type = reader.GetString(6),
                    ManagementZones = reader.GetString(7),
                    Properties = reader.GetString(8),
                    Tags = reader.GetString(9)
                };

                var entitySchema = new EntitySchema
                {
                    EntityId = entityDb.EntityId,
                    Environment = entityDb.Environment,
                    Tenant = entityDb.Tenant,
                    DisplayName = entityDb.DisplayName,
                    FirstSeen = entityDb.FirstSeen,
                    LastSeen = entityDb.LastSeen,
                    Type = entityDb.Type,
                    ManagementZones = JsonConvert.DeserializeObject<List<ManagementZone>>(entityDb.ManagementZones),
                    Properties = JsonConvert.DeserializeObject<EntityProperties>(entityDb.Properties),
                    Tags = JsonConvert.DeserializeObject<List<Tag>>(entityDb.Tags)

                };

                entities.Add(entitySchema);
            }

            return entities;
        }


        public async Task<ConcurrentDictionary<string, List<EntitySchema>>> GetEntities()
        {
            Console.WriteLine($"GetEntitiesByEnvironment at {DateTime.Now.ToString()}");
            var entities = new ConcurrentDictionary<string, List<EntitySchema>>();
            using var connection = new SqlConnection(_connectionString);
            await connection.OpenAsync();

            const string query = @"SELECT EntityId, Environment, Tenant, DisplayName, FirstSeen, LastSeen, 
                           Type, ManagementZones, Properties, Tags FROM DynatraceMonitoredEntities
                            WHERE Type <> 'HYPERVISOR_DISK'";

            using var command = new SqlCommand(query, connection);

            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                var entityDb = new EntityDb
                {
                    EntityId = reader.GetString(0),
                    Environment = reader.GetString(1),
                    Tenant = reader.GetString(2),
                    DisplayName = reader.GetString(3),
                    FirstSeen = reader.GetDateTime(4),
                    LastSeen = reader.GetDateTime(5),
                    Type = reader.GetString(6),
                    ManagementZones = reader.GetString(7),
                    Properties = reader.GetString(8),
                    Tags = reader.GetString(9)
                };

                var entitySchema = new EntitySchema
                {
                    EntityId = entityDb.EntityId,
                    Environment = entityDb.Environment,
                    Tenant = entityDb.Tenant,
                    DisplayName = entityDb.DisplayName.ToUpper(),
                    FirstSeen = entityDb.FirstSeen,
                    LastSeen = entityDb.LastSeen,
                    Type = entityDb.Type,
                    ManagementZones = JsonConvert.DeserializeObject<List<ManagementZone>>(entityDb.ManagementZones),
                    Properties = JsonConvert.DeserializeObject<EntityProperties>(entityDb.Properties),
                    Tags = JsonConvert.DeserializeObject<List<Tag>>(entityDb.Tags)
                };

                entities.AddOrUpdate(entitySchema.DisplayName, new List<EntitySchema> { entitySchema }, (key, existingList) =>
                {
                    existingList.Add(entitySchema);
                    return existingList;
                });
            }

            Console.WriteLine($"Finish get entities at {DateTime.Now.ToString()}");
            return entities;
        }


        public async Task<List<EntitySchema>> GetEntitiesExcludingIds(List<string> entityIds, string environment)
        {
            var entities = new List<EntitySchema>();

            using var connection = new SqlConnection(_connectionString);
            await connection.OpenAsync();

            var parameters = string.Join(",", entityIds.Select((id, index) => $"@id{index}"));
            var query = $"SELECT EntityId, Environment, Tenant, DisplayName, FirstSeen, LastSeen, Type, ManagementZones, " +
                $"Properties, Tags FROM DynatraceMonitoredEntities WHERE EntityId NOT IN ({parameters}) AND Environment = @Environment";

            using var command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("@Environment", environment);

            for (int i = 0; i < entityIds.Count; i++)
            {
                command.Parameters.AddWithValue($"@id{i}", entityIds[i]);
            }

            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                var entityDb = new EntityDb
                {
                    EntityId = reader.GetString(0),
                    Environment = reader.GetString(1),
                    Tenant = reader.GetString(2),
                    DisplayName = reader.GetString(3),
                    FirstSeen = reader.GetDateTime(4),
                    LastSeen = reader.GetDateTime(5),
                    Type = reader.GetString(6),
                    ManagementZones = reader.GetString(7),
                    Properties = reader.GetString(8),
                    Tags = reader.GetString(9)
                };

                var entitySchema = new EntitySchema
                {
                    EntityId = entityDb.EntityId,
                    Environment = entityDb.Environment,
                    Tenant = entityDb.Tenant,
                    DisplayName = entityDb.DisplayName,
                    FirstSeen = entityDb.FirstSeen,
                    LastSeen = entityDb.LastSeen,
                    Type = entityDb.Type,
                    ManagementZones = JsonConvert.DeserializeObject<List<ManagementZone>>(entityDb.ManagementZones),
                    Properties = JsonConvert.DeserializeObject<EntityProperties>(entityDb.Properties),
                    Tags = JsonConvert.DeserializeObject<List<Tag>>(entityDb.Tags)
                };

                entities.Add(entitySchema);
            }

            return entities;
        }

    }
}
