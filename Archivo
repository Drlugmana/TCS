import React from "react";
import useOpenProblems from "../hooks/useOpenProblems";
import { esTCS } from "../utils/jurisdiction";
import ProblemCard from "../components/ProblemCard";
import UsernameInput from "../components/UsernameInput";

export default function TCSProblems() {
  const { problems, loading, error } = useOpenProblems(50);
  const tcs = problems.filter(esTCS);

  if (loading) return <h2>Cargando problemas TCS…</h2>;
  if (error) return <h2 style={{ color: "crimson" }}>Error: {error}</h2>;
  if (tcs.length === 0) return <h2>No hay problemas TCS actualmente.</h2>;

  const sorted = [...tcs].sort((a, b) => {
    const ta = a.startTime ? new Date(a.startTime).getTime() : 0;
    const tb = b.startTime ? new Date(b.startTime).getTime() : 0;
    return tb - ta;
  });

  return (
    <>
      <h2>Problemas TCS</h2>
      <UsernameInput />
      {sorted.map((p) => (
        <ProblemCard key={p.problemId || p.displayId} problem={p} />
      ))}
    </>
  );
}


--------


import React from "react";
import useOpenProblems from "../hooks/useOpenProblems";
import { esNoTCS } from "../utils/jurisdiction";
import ProblemCard from "../components/ProblemCard";
import UsernameInput from "../components/UsernameInput";

export default function OtherProblems() {
  const { problems, loading, error } = useOpenProblems(50);
  const otros = problems.filter(esNoTCS);

  if (loading) return <h2>Cargando problemas de terceros…</h2>;
  if (error) return <h2 style={{ color: "crimson" }}>Error: {error}</h2>;
  if (otros.length === 0) return <h2>No hay problemas de terceros actualmente.</h2>;

  const sorted = [...otros].sort((a, b) => {
    const ta = a.startTime ? new Date(a.startTime).getTime() : 0;
    const tb = b.startTime ? new Date(b.startTime).getTime() : 0;
    return tb - ta;
  });

  return (
    <>
      <h2>Problemas Otros</h2>
      <UsernameInput />
      {sorted.map((p) => (
        <ProblemCard key={p.problemId || p.displayId} problem={p} />
      ))}
    </>
  );
}


------

import React from "react";
import useOpenProblems from "../hooks/useOpenProblems";
import ProblemCard from "../components/ProblemCard";
import UsernameInput from "../components/UsernameInput";

export default function AllProblems() {
  const { problems, loading, error } = useOpenProblems(50);

  if (loading) return <h2>Cargando problemas…</h2>;
  if (error) return <h2 style={{ color: "crimson" }}>Error: {error}</h2>;
  if (problems.length === 0) return <h2>No hay problemas actualmente.</h2>;

  const sorted = [...problems].sort((a, b) => {
    const ta = a.startTime ? new Date(a.startTime).getTime() : 0;
    const tb = b.startTime ? new Date(b.startTime).getTime() : 0;
    return tb - ta;
  });

  return (
    <>
      <h2>Todos los Problemas</h2>
      <UsernameInput />
      {sorted.map((p) => (
        <ProblemCard key={p.problemId || p.displayId} problem={p} />
      ))}
    </>
  );
}
