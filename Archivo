
public static async Task<List<Server>> GetCmdbServersList()
{
    using var httpClient = new HttpClient()
    {
        Timeout = TimeSpan.FromMinutes(5) // ahora espera hasta 5 minutos
    };

    int maxRetries   = 3;  // número de reintentos
    int delaySeconds = 5;  // espera entre intentos

    for (int intento = 1; intento <= maxRetries; intento++)
    {
        try
        {
            var byteArray = Encoding.ASCII.GetBytes($"{_apiSettings.User}:{_apiSettings.Password}");
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            Console.WriteLine($"Intento {intento} de {maxRetries} para obtener la lista de servidores CMDB...");

            HttpResponseMessage response = await httpClient.GetAsync(_apiSettings.Url);

            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonConvert.DeserializeObject<CmdbResponse>(responseBody);
                var serverList  = apiResponse?.Result ?? new List<Server>();

                // >>> SIN DEDUP: devolver crudo <<<
                return serverList;
            }
            else
            {
                Console.WriteLine($"✘ Error HTTP {response.StatusCode} en intento {intento}");
            }
        }
        catch (TaskCanceledException ex)
        {
            Console.WriteLine($"⏰ Timeout en intento {intento}: {ex.Message}");
            if (intento == maxRetries) throw;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"✘ Error en intento {intento}: {ex.Message}");
            if (intento == maxRetries) throw;
        }

        // Espera antes de reintentar
        Console.WriteLine($"⏳ Esperando {delaySeconds} segundos antes del reintento...");
        await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
    }

    return new List<Server>(); // si todo falla, retorna lista vacía
}