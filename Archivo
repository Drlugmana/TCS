import React from "react";
import useOpenProblems from "./hooks/useOpenProblems";
import ProblemCard from "./components/ProblemCard";
import UsernameInput from "./components/UsernameInput";
import { useUser } from "./context/UserContext";
import { calcularCriticidad, getSlaMinutes } from "./utils/slaUtils";
import { esTCS } from "./utils/jurisdiction";

export default function TCSProblems() {
  const { problems, loading, error } = useOpenProblems(5000);
  const { username } = useUser();

  // ðŸ”§ Nuevo filtro
  const tcsProblems = problems.filter(esTCS);

  if (loading) return <h2>Cargando problemas TCSâ€¦</h2>;
  if (error) return <h2 style={{ color: "red" }}>Error: {error}</h2>;
  if (tcsProblems.length === 0)
    return <h2>No hay problemas TCS actualmente.</h2>;

  // Ordenar por SLA
  const sortedProblems = [...tcsProblems].sort((a, b) => {
    const startA = new Date(a.startTime);
    const startB = new Date(b.startTime);

    const criticidadA = calcularCriticidad(a.affectedCI || []);
    const criticidadB = calcularCriticidad(b.affectedCI || []);

    const slaA = getSlaMinutes(criticidadA) * 60 * 1000;
    const slaB = getSlaMinutes(criticidadB) * 60 * 1000;

    const remainingA = slaA - (Date.now() - startA.getTime());
    const remainingB = slaB - (Date.now() - startB.getTime());

    return remainingA - remainingB;
  });

  return (
    <div style={{ maxWidth: "900px", margin: "0 auto", padding: "1rem" }}>
      <h1 style={{ textAlign: "center" }}>Problemas TCS</h1>
      <UsernameInput />
      {sortedProblems.map((problem) => (
        <ProblemCard
          key={problem.problemId}
          problem={problem}
          username={username}
        />
      ))}
    </div>
  );
}

------


import React from "react";
import useOpenProblems from "./hooks/useOpenProblems";
import ProblemCard from "./components/ProblemCard";
import UsernameInput from "./components/UsernameInput";
import { useUser } from "./context/UserContext";
import { calcularCriticidad, getSlaMinutes } from "./utils/slaUtils";
import { esNoTCS } from "./utils/jurisdiction";

export default function OtherProblems() {
  const { username } = useUser();
  const { problems, loading, error } = useOpenProblems(5000);

  const otherProblems = problems.filter(esNoTCS);

  if (loading) return <h2>Cargando problemas de tercerosâ€¦</h2>;
  if (error) return <h2 style={{ color: "red" }}>Error: {error}</h2>;
  if (otherProblems.length === 0)
    return <h2>No hay problemas de terceros actualmente.</h2>;

  const sortedProblems = [...otherProblems].sort((a, b) => {
    const startA = new Date(a.startTime);
    const startB = new Date(b.startTime);

    const criticidadA = calcularCriticidad(a.affectedCI || []);
    const criticidadB = calcularCriticidad(b.affectedCI || []);

    const slaA = getSlaMinutes(criticidadA) * 60 * 1000;
    const slaB = getSlaMinutes(criticidadB) * 60 * 1000;

    const remainingA = slaA - (Date.now() - startA.getTime());
    const remainingB = slaB - (Date.now() - startB.getTime());

    return remainingA - remainingB;
  });

  return (
    <div style={{ maxWidth: "900px", margin: "0 auto", padding: "1rem" }}>
      <h1 style={{ textAlign: "center" }}>Problemas Otros</h1>
      <UsernameInput />
      {sortedProblems.map((problem) => (
        <ProblemCard
          key={problem.problemId}
          problem={problem}
          username={username}
        />
      ))}
    </div>
  );
}