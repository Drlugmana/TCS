import { BrowserRouter, Routes, Route, NavLink, Navigate } from 'react-router-dom';
import TCSProblems from './pages/TCSProblems';
import OtherProblems from './pages/OtherProblems';
import AllProblems from './pages/AllProblems';

function Menu() {
  const linkStyle = ({ isActive }) => ({
    padding: '8px 12px',
    marginRight: 8,
    borderRadius: 6,
    textDecoration: 'none',
    color: 'white',
    background: isActive ? '#213d82' : '#2d4aa9'
  });
  return (
    <nav style={{ padding: 12, background: '#163878' }}>
      <NavLink to="/tcs" style={linkStyle}>TCS</NavLink>
      <NavLink to="/otros" style={linkStyle}>Otros</NavLink>
      <NavLink to="/todos" style={linkStyle}>Todos</NavLink>
    </nav>
  );
}

export default function App() {
  return (
    <BrowserRouter>
      <Menu />
      <div style={{ padding: 16 }}>
        <Routes>
          <Route path="/" element={<Navigate to="/tcs" replace />} />
          <Route path="/tcs" element={<TCSProblems />} />
          <Route path="/otros" element={<OtherProblems />} />
          <Route path="/todos" element={<AllProblems />} />
          <Route path="*" element={<h2>Ruta no encontrada</h2>} />
        </Routes>
      </div>
    </BrowserRouter>
  );
}



-----
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

---------
const BASE = import.meta.env.VITE_API_URL?.replace(/\/+$/, ''); // sin slash final

if (!BASE) {
  // NO lances excepción dura: muestra aviso y permite que el componente renderice el error
  console.error('VITE_API_URL no está definida. Crea .env con VITE_API_URL=https://<host>');
}

const PROBLEMS_BASE = BASE ? `${BASE}/api/Problems` : null;

async function toJsonOrThrow(res, ctx) {
  const text = await res.text().catch(() => '');
  if (!res.ok) {
    const msg = `${ctx} (HTTP ${res.status}) ${text}`.trim();
    throw new Error(msg);
  }
  try {
    return JSON.parse(text);
  } catch {
    return text; // por si la API devuelve texto
  }
}

function pickArray(payload) {
  if (Array.isArray(payload)) return payload;
  if (Array.isArray(payload?.items)) return payload.items;
  if (Array.isArray(payload?.data)) return payload.data;
  if (Array.isArray(payload?.result)) return payload.result;
  return [];
}

export async function fetchProblemsPage(page = 1, pageSize = 50) {
  if (!PROBLEMS_BASE) throw new Error('VITE_API_URL no está definida');
  const url = `${PROBLEMS_BASE}?page=${page}&pageSize=${pageSize}`;
  console.debug('[fetchProblemsPage] GET', url);
  const res = await fetch(url, { headers: { Accept: 'application/json' } });
  const json = await toJsonOrThrow(res, `Error al obtener problemas de Productivo, página ${page}`);
  const arr = pickArray(json);
  if (arr.length === 0) console.warn('[fetchProblemsPage] Respuesta vacía:', json);
  else console.debug('[fetchProblemsPage] Ejemplo item:', arr[0]);
  return arr;
}

export async function fetchProblemById(id) {
  if (!PROBLEMS_BASE) throw new Error('VITE_API_URL no está definida');
  const url = `${PROBLEMS_BASE}/${encodeURIComponent(id)}`;
  const res = await fetch(url, { headers: { Accept: 'application/json' } });
  return toJsonOrThrow(res, `Error al obtener problema ${id}`);
}


--------


export function getJurisdictionObject(p) {
  const j =
    p?.jurisdiction ??
    p?.Jurisdiction ??
    p?.jurisdictionDto ??
    p?.JurisdictionDto ??
    null;

  if (typeof j === 'string') {
    const label = j.trim().toUpperCase();
    return { isTcs: label === 'TCS', label };
  }
  if (typeof p?.isTcs === 'boolean') {
    return { isTcs: p.isTcs, label: p.isTcs ? 'TCS' : 'NO_TCS' };
  }
  if (j && typeof j === 'object') {
    const label = (j.label ?? j.Label ?? '').toString().trim().toUpperCase();
    const isTcs = typeof j.isTcs === 'boolean' ? j.isTcs : (label ? label === 'TCS' : undefined);
    return { isTcs, label: label || (isTcs ? 'TCS' : 'NO_TCS') };
  }
  return { isTcs: undefined, label: '' };
}

export const esTCS = (p) => getJurisdictionObject(p).isTcs === true;
export const esNoTCS = (p) => getJurisdictionObject(p).isTcs === false;

---------

import { useEffect, useState } from 'react';
import { fetchProblemsPage } from '../api/problems';
import { esTCS } from '../utils/jurisdiction';

export default function TCSProblems() {
  const [items, setItems] = useState([]);
  const [state, setState] = useState('loading'); // loading | ok | error
  const [message, setMessage] = useState('');

  useEffect(() => {
    (async () => {
      try {
        const data = await fetchProblemsPage(1, 50);
        setItems(data.filter(esTCS));
        setState('ok');
      } catch (e) {
        console.error(e);
        setMessage(e.message || 'Error desconocido');
        setState('error');
      }
    })();
  }, []);

  if (state === 'loading') return <h2>Cargando TCS…</h2>;
  if (state === 'error') return <h2 style={{ color: '#c00' }}>Error: {message}</h2>;
  if (items.length === 0) return <h2>No hay problemas TCS actualmente.</h2>;

  return (
    <div>
      {items.map((p, i) => (
        <div key={p.problemId ?? p.id ?? i} style={{ background: '#ffe1e1', margin: '8px 0', padding: 12, borderRadius: 8 }}>
          <div style={{ fontWeight: 'bold' }}>{p.title ?? p.shortDescription ?? p.displayId ?? '(sin título)'}</div>
          <div>ID: {p.problemId ?? p.id ?? '-'}</div>
        </div>
      ))}
    </div>
  );
}

-----

import { useEffect, useState } from 'react';
import { fetchProblemsPage } from '../api/problems';
import { esNoTCS } from '../utils/jurisdiction';

export default function OtherProblems() {
  const [items, setItems] = useState([]);
  const [state, setState] = useState('loading');
  const [message, setMessage] = useState('');

  useEffect(() => {
    (async () => {
      try {
        const data = await fetchProblemsPage(1, 50);
        setItems(data.filter(esNoTCS));
        setState('ok');
      } catch (e) {
        console.error(e);
        setMessage(e.message || 'Error desconocido');
        setState('error');
      }
    })();
  }, []);

  if (state === 'loading') return <h2>Cargando Otros…</h2>;
  if (state === 'error') return <h2 style={{ color: '#c00' }}>Error: {message}</h2>;
  if (items.length === 0) return <h2>No hay problemas de terceros actualmente.</h2>;

  return (
    <div>
      {items.map((p, i) => (
        <div key={p.problemId ?? p.id ?? i} style={{ background: '#ffe9c4', margin: '8px 0', padding: 12, borderRadius: 8 }}>
          <div style={{ fontWeight: 'bold' }}>{p.title ?? p.shortDescription ?? p.displayId ?? '(sin título)'}</div>
          <div>ID: {p.problemId ?? p.id ?? '-'}</div>
        </div>
      ))}
    </div>
  );
}

-----

import { useEffect, useState } from 'react';
import { fetchProblemsPage } from '../api/problems';

export default function AllProblems() {
  const [items, setItems] = useState([]);
  const [state, setState] = useState('loading');
  const [message, setMessage] = useState('');

  useEffect(() => {
    (async () => {
      try {
        const data = await fetchProblemsPage(1, 50);
        setItems(data);
        setState('ok');
      } catch (e) {
        console.error(e);
        setMessage(e.message || 'Error desconocido');
        setState('error');
      }
    })();
  }, []);

  if (state === 'loading') return <h2>Cargando Todos…</h2>;
  if (state === 'error') return <h2 style={{ color: '#c00' }}>Error: {message}</h2>;
  if (items.length === 0) return <h2>No hay problemas actualmente.</h2>;

  return (
    <div>
      {items.map((p, i) => (
        <div key={p.problemId ?? p.id ?? i} style={{ background: '#e4f2ff', margin: '8px 0', padding: 12, borderRadius: 8 }}>
          <div style={{ fontWeight: 'bold' }}>{p.title ?? p.shortDescription ?? p.displayId ?? '(sin título)'}</div>
          <div>ID: {p.problemId ?? p.id ?? '-'}</div>
        </div>
      ))}
    </div>
  );
}




