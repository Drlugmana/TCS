
private static void CreateFilteredByRulesSheet(ExcelPackage package, string sourceSheetName, string targetSheetName)
{
    var src = package.Workbook.Worksheets[sourceSheetName];
    if (src == null) { Console.WriteLine($"丘멆잺 No se encontr칩 la hoja '{sourceSheetName}'."); return; }

    int colCount = src.Dimension.End.Column;
    int rowCount = src.Dimension.End.Row;

    // ===== Normalizadores =====
    string RemoveDiacritics(string s)
    {
        var norm = s.Normalize(NormalizationForm.FormD);
        var sb = new StringBuilder();
        foreach (var ch in norm)
        {
            var uc = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(ch);
            if (uc != System.Globalization.UnicodeCategory.NonSpacingMark) sb.Append(ch);
        }
        return sb.ToString().Normalize(NormalizationForm.FormC);
    }
    string NormHeader(string? s)
    {
        s = (s ?? "");
        s = RemoveDiacritics(s);
        s = s.Replace("(", " ").Replace(")", " ").Replace("_", " ");
        s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " ");
        return s.Trim().ToUpperInvariant();
    }
    string NormVal(string? s)
    {
        s = (s ?? "");
        s = RemoveDiacritics(s);
        s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " ");
        return s.Trim().ToUpperInvariant();
    }

    // ===== Localiza columnas con "contains" del encabezado normalizado =====
    int FindColFuzzy(params string[] headerHints)
    {
        var targets = headerHints.Select(NormHeader).ToList();
        for (int c = 1; c <= colCount; c++)
        {
            var h = NormHeader(src.Cells[1, c].Text);
            if (targets.Any(t => h.Contains(t))) return c;
        }
        return -1;
    }

    int colInventarioTorres   = FindColFuzzy("INVENTARIO TORRES");
    int colAplicaPorSO        = FindColFuzzy("APLICA MONITOREO POR SO", "APLICA MONITOREO SO");
    int colAplicaPorNombre    = FindColFuzzy("APLICA POR NOMBRE");
    int colEstadoOperativoCat = FindColFuzzy("ESTADO OPERATIVO CATALOGO", "ESTADO OPERATIVO");

    if (colInventarioTorres < 0 || colAplicaPorSO < 0 || colAplicaPorNombre < 0 || colEstadoOperativoCat < 0)
    {
        Console.WriteLine("丘멆잺 No se encontraron todas las columnas requeridas. Encabezados detectados:");
        for (int c = 1; c <= colCount; c++)
            Console.WriteLine($"  Col {c}: '{src.Cells[1, c].Text}' -> '{NormHeader(src.Cells[1, c].Text)}'");
        return;
    }

    // Hoja destino
    var dst = package.Workbook.Worksheets.Add(targetSheetName);

    // Copiar encabezados completos
    for (int c = 1; c <= colCount; c++)
    {
        dst.Cells[1, c].Value = src.Cells[1, c].Value;
        dst.Cells[1, c].Style.Font.Bold = true;
    }

    // Contadores de diagn칩stico
    int total = 0, passInv = 0, passSO = 0, passNom = 0, passEst = 0, escritos = 0;

    int outRow = 2;
    for (int r = 2; r <= rowCount; r++)
    {
        total++;

        string invTorres = NormVal(src.Cells[r, colInventarioTorres].Text);
        string porSO     = NormVal(src.Cells[r, colAplicaPorSO].Text);
        string porNombre = NormVal(src.Cells[r, colAplicaPorNombre].Text);
        string estado    = NormVal(src.Cells[r, colEstadoOperativoCat].Text);

        bool c1 = invTorres == "SI";
        bool c2 = porSO == "VERIFICAR";
        bool c3 = porNombre == "SI";
        bool c4 = estado == "OPERATIVO";

        if (c1) passInv++;
        if (c2) passSO++;
        if (c3) passNom++;
        if (c4) passEst++;

        if (c1 && c2 && c3 && c4)
        {
            for (int c = 1; c <= colCount; c++)
                dst.Cells[outRow, c].Value = src.Cells[r, c].Value;

            outRow++;
            escritos++;
        }
    }

    Console.WriteLine($"游빍 Diagn칩stico '{targetSheetName}': total={total}, InvTorres=SI -> {passInv}, " +
                      $"AplicaSO=VERIFICAR -> {passSO}, AplicaNombre=SI -> {passNom}, Estado=OPERATIVO -> {passEst}, " +
                      $"Escritos={escritos}");

    Console.WriteLine($"游릭 Hoja '{targetSheetName}' creada con {escritos} filas.");
}