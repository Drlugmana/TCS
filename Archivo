using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using RestAPIDynatrace.ML.Clases;   // JurisdictionInput, JurisdictionPrediction
using RestAPIDynatrace.Models;      // Problem, ProblemDynatraceResponse, JurisdictionDto

namespace RestAPIDynatrace.ML.Functions
{
    public static class MLFunctions
    {
        private const string ModelVersion = "jurisdiction_model:1.0";

        // ============================================================
        // 1) Clasificación para RestAPIDynatrace.Models.Problem
        // ============================================================
        public static JurisdictionDto ClassifyProblem(Problem p)
        {
            var engine   = MLModelInitializer.GetEngine();
            var fullText = BuildTextFromObject(p);

            var shortDesc = GetProp(p, "ShortDescription", "shortDescription");
            var pred = engine.Predict(new JurisdictionInput
            {
                ShortDescription = string.IsNullOrWhiteSpace(shortDesc) ? fullText : shortDesc!
            });

            bool   isTcs = pred.PredictedLabel;
            string label = isTcs ? "TCS" : "NO_TCS";

            float score = pred.Probability;
            if ((pred.Score?.Length ?? 0) > 0) score = pred.Score.Max();

            return new JurisdictionDto
            {
                IsTcs        = isTcs,
                Label        = label,
                Score        = score,
                Version      = ModelVersion,
                ClassifiedAt = DateTimeOffset.UtcNow
            };
        }

        // ============================================================
        // 2) Clasificación para ProblemDynatraceResponse
        // ============================================================
        public static JurisdictionDto ClassifyProblem(ProblemDynatraceResponse p)
        {
            var engine   = MLModelInitializer.GetEngine();
            var fullText = BuildTextFromObject(p);

            var shortDesc = GetProp(p, "ShortDescription", "shortDescription");
            var pred = engine.Predict(new JurisdictionInput
            {
                ShortDescription = string.IsNullOrWhiteSpace(shortDesc) ? fullText : shortDesc!
            });

            bool   isTcs = pred.PredictedLabel;
            string label = isTcs ? "TCS" : "NO_TCS";

            float score = pred.Probability;
            if ((pred.Score?.Length ?? 0) > 0) score = pred.Score.Max();

            return new JurisdictionDto
            {
                IsTcs        = isTcs,
                Label        = label,
                Score        = score,
                Version      = ModelVersion,
                ClassifiedAt = DateTimeOffset.UtcNow
            };
        }

        // ============================================================
        // 3) Compatibilidad si aún llaman PredictIssue(title)
        // ============================================================
        public static string PredictIssue(string title)
        {
            var eng  = MLModelInitializer.GetEngine();
            var pred = eng.Predict(new JurisdictionInput { ShortDescription = title ?? string.Empty });
            return pred.PredictedLabel ? "TCS" : "NO_TCS";
        }

        // ============================================================
        // Helpers (tolerantes a null y nombres distintos)
        // ============================================================

        // Construye un texto rico de respaldo si ShortDescription viene vacío
        private static string BuildTextFromObject(object obj)
        {
            var sb = new StringBuilder();

            // Campos de cabecera
            Append(sb, GetProp(obj, "title"));
            Append(sb, GetProp(obj, "shortDescription", "ShortDescription"));
            Append(sb, GetProp(obj, "impactLevel", "ImpactLevel"));
            Append(sb, GetProp(obj, "severityLevel", "SeverityLevel"));
            Append(sb, GetProp(obj, "status", "Status"));

            // ServiceNow
            var isn = GetObj(obj, "incidentServiceNow");
            if (isn != null)
            {
                Append(sb, GetProp(isn, "ShortDescription", "Description", "Resumen", "Detalle"));
                Append(sb, GetProp(isn, "Number", "Ticket"));
            }

            // Evidencia / Comentarios / Análisis
            var ev = GetObj(obj, "evidenceDetails");
            if (ev != null) Append(sb, GetProp(ev, "Details", "Description", "Text", "EvidenceText"));

            var rc = GetObj(obj, "recentComments");
            if (rc != null) Append(sb, GetProp(rc, "Comments", "Text", "LastComment"));

            var ia = GetObj(obj, "impactAnalysis");
            if (ia != null) Append(sb, GetProp(ia, "Summary", "Description", "Text"));

            // Listas de objetos
            AppendFromObjList(sb, GetList(obj, "affectedEntities"),  "displayName", "name", "entityName", "hostname", "serverName");
            AppendFromObjList(sb, GetList(obj, "impactedEntities"),  "displayName", "name", "entityName", "hostname", "serverName");
            AppendFromObjList(sb, GetList(obj, "entityTags"),        "key", "value", "context", "stringRepresentation");
            AppendFromObjList(sb, GetList(obj, "managementZones"),   "name", "id");

            // Listas de strings
            AppendFromStrList(sb, GetStrList(obj, "clusterName"));
            AppendFromStrList(sb, GetStrList(obj, "namespaceName"));

            // Contexto
            Append(sb, GetProp(obj, "tenant", "Tenant"));
            Append(sb, GetProp(obj, "environment", "Environment"));
            Append(sb, GetProp(obj, "displayId", "DisplayId"));

            return sb.ToString().Trim();
        }

        private static void Append(StringBuilder sb, string? s)
        {
            if (!string.IsNullOrWhiteSpace(s))
            {
                if (sb.Length > 0) sb.Append(' ');
                sb.Append(s);
            }
        }

        private static string? GetProp(object obj, params string[] names)
        {
            var t = obj.GetType();
            foreach (var n in names)
            {
                var pi = t.GetProperty(n, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase);
                if (pi == null) continue;
                var val = pi.GetValue(obj)?.ToString();
                if (!string.IsNullOrWhiteSpace(val)) return val;
            }
            return null;
        }

        private static object? GetObj(object obj, string name)
        {
            var pi = obj.GetType().GetProperty(name, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase);
            return pi?.GetValue(obj);
        }

        private static IEnumerable<object> GetList(object obj, string name)
        {
            var pi = obj.GetType().GetProperty(name, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase);
            if (pi?.GetValue(obj) is System.Collections.IEnumerable e)
            {
                foreach (var it in e) if (it != null) yield return it;
            }
        }

        private static IEnumerable<string> GetStrList(object obj, string name)
        {
            var pi = obj.GetType().GetProperty(name, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase);
            if (pi?.GetValue(obj) is IEnumerable<string> list)
                return list.Where(s => !string.IsNullOrWhiteSpace(s));
            return Enumerable.Empty<string>();
        }

        private static void AppendFromObjList(StringBuilder sb, IEnumerable<object> items, params string[] candidateProps)
        {
            foreach (var it in items)
            {
                var v = GetProp(it, candidateProps);
                Append(sb, v);
            }
        }

        private static void AppendFromStrList(StringBuilder sb, IEnumerable<string> items)
        {
            var txt = string.Join(' ', items.Where(s => !string.IsNullOrWhiteSpace(s)));
            Append(sb, txt);
        }
    }
}
