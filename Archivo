import React from 'react';

export default class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  componentDidCatch(error, info) {
    console.error('ðŸ’¥ Error en un hijo de ErrorBoundary:', error, info);
  }
  render() {
    if (this.state.error) {
      return (
        <div style={{ padding: 16, background: '#ffe6e6', borderRadius: 8, color: '#b00020' }}>
          <b>Se rompiÃ³ el render de un item:</b>
          <pre style={{ whiteSpace: 'pre-wrap' }}>{String(this.state.error)}</pre>
        </div>
      );
    }
    return this.props.children;
  }
}


--------
import React, { useEffect, useState } from 'react';

// Si estos helpers no existen aÃºn, comenta las 2 import y usa la versiÃ³n inline de abajo.
// import { getSlaMinutes, getColorByPercent, calcularCriticidad, getButtonColorByPercent } from '../utils/jurisdiction';

// Helpers mÃ­nimos de respaldo:
const calcularCriticidad = (affectedCI = []) => {
  // Si ya tienes tu regla real, usa esa; por ahora, S4 si no hay datos
  return 4;
};
const getSlaMinutes = (criticidad) => {
  // Ejemplo: S1=60, S2=120, S3=240, S4=360
  const mapa = { 1: 60, 2: 120, 3: 240, 4: 360 };
  return mapa[criticidad] ?? 240;
};
const getColorByPercent = (p) => {
  if (Number.isNaN(p)) return '#f8d7da';
  if (p > 66) return '#ffb3b3';
  if (p > 33) return '#ff9999';
  return '#ff8080';
};
const getButtonColorByPercent = (p) => {
  if (Number.isNaN(p)) return '#6c757d';
  if (p > 66) return '#6c757d';
  if (p > 33) return '#5a6268';
  return '#343a40';
};

export default function ProblemCard({ problem, username }) {
  if (!problem) return null;

  const {
    title = '',
    severityLevel = '',
    impactLevel = '',
    startTime,
    environment = '',
    affectedCI = [],
    tenant,
    problemId,
    jurisdiction,
  } = problem;

  // TCS / NO TCS robusto
  const isTcs =
    typeof jurisdiction?.isTcs === 'boolean'
      ? jurisdiction.isTcs
      : (jurisdiction?.label ?? '').toString().toUpperCase() === 'TCS';
  const label = isTcs ? 'TCS' : 'NO TCS';
  const confidence =
    typeof jurisdiction?.confidence === 'number'
      ? jurisdiction.confidence <= 1
        ? Math.round(jurisdiction.confidence * 100)
        : Math.round(jurisdiction.confidence)
      : null;

  const badgeStyle = {
    padding: '0.25rem 0.5rem',
    borderRadius: '999px',
    fontSize: '0.8rem',
    fontWeight: 700,
    backgroundColor: isTcs ? '#1b5e20' : '#b71c1c',
    color: '#fff',
    marginRight: '0.5rem',
  };

  const criticidad = calcularCriticidad(affectedCI);
  const criticidadIcon = `/severidad${criticidad}.svg`;
  const environmentIcon = environment === 'Productivo' ? '/icon-productivo.svg' : '/icon-noproductivo.svg';

  const start = startTime ? new Date(startTime) : new Date();
  const slaMinutes = getSlaMinutes(criticidad);
  const [now, setNow] = useState(new Date());
  useEffect(() => {
    const i = setInterval(() => setNow(new Date()), 1000);
    return () => clearInterval(i);
  }, []);

  const elapsedMs = Math.max(now - start, 0);
  const elapsedMinutes = elapsedMs / 60000;
  const remainingMinutes = Math.max(slaMinutes - elapsedMinutes, 0);
  const percentRemaining = Math.max((remainingMinutes / (slaMinutes || 1)) * 100, 0);

  const bgColor = getColorByPercent(percentRemaining);
  const buttonColor = getButtonColorByPercent(percentRemaining);

  const formatTime = (minutes) => {
    const total = Math.max(Math.floor(minutes * 60), 0);
    const s = total % 60;
    const m = Math.floor((total % 3600) / 60);
    const h = Math.floor(total / 3600);
    return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
  };

  const uniqueNames = [...new Set((affectedCI ?? []).map((ci) => ci?.name).filter(Boolean))];
  const equipos = uniqueNames.join(', ') || 'â€”';

  const isDisabled = !username;
  const dynatraceUrl =
    tenant && problemId
      ? `https://${tenant}.live.dynatrace.com/#problems/problemdetails;pid=${problemId}`
      : null;

  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        borderRadius: 12,
        padding: '1rem 1.5rem',
        marginBottom: '1rem',
        backgroundColor: bgColor,
        boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
      }}
    >
      {/* Iconos */}
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '0.5rem' }}>
        <img src={criticidadIcon} alt={`S${criticidad}`} width="40" height="40" title={`S${criticidad}`} />
        <img src={environmentIcon} alt={environment} width="36" height="36" title={environment} />
      </div>

      {/* Info */}
      <div style={{ flex: 1, paddingLeft: '1rem' }}>
        <div style={{ display: 'flex', alignItems: 'center', marginBottom: 8 }}>
          <span style={badgeStyle}>{label}</span>
          {typeof confidence === 'number' && (
            <span style={{ opacity: 0.75 }}>confianza: <strong>{confidence}%</strong></span>
          )}
        </div>

        <p style={{ margin: 0 }}><strong>TÃ­tulo:</strong> {title || '(sin tÃ­tulo)'}</p>
        <p style={{ margin: 0 }}><strong>Severidad Dynatrace:</strong> {severityLevel || 'â€”'}</p>
        <p style={{ margin: 0 }}><strong>Impacto:</strong> {impactLevel || 'â€”'}</p>
        <p style={{ margin: 0 }}><strong>Inicio:</strong> {isNaN(start.getTime()) ? 'â€”' : start.toLocaleString()}</p>
        <p style={{ margin: 0 }}><strong>Criticidad CI:</strong> {criticidad}</p>
        <p style={{ margin: 0 }}><strong>Equipos afectados:</strong> {equipos}</p>
      </div>

      {/* Timer y botÃ³n */}
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '2rem', fontWeight: 'bold' }}>{formatTime(remainingMinutes)}</div>
        <button
          disabled={isDisabled || !dynatraceUrl}
          onClick={() => dynatraceUrl && window.open(dynatraceUrl, '_blank')}
          style={{
            padding: '0.5rem 1rem',
            borderRadius: 6,
            color: '#fff',
            border: 'none',
            backgroundColor: isDisabled || !dynatraceUrl ? '#8b8b8b' : buttonColor,
            cursor: isDisabled || !dynatraceUrl ? 'not-allowed' : 'pointer',
            marginTop: 8,
          }}
          title={!username ? 'Ingresa tu usuario para habilitar' : 'Revisar en Dynatrace'}
        >
          Revisar problema
        </button>
      </div>
    </div>
  );
}
