// src/api/problems.js
const BASE = import.meta.env.VITE_API_URL?.replace(/\/+$/, ''); // sin slash final
if (!BASE) throw new Error('VITE_API_URL no está definida');

const PROBLEMS_BASE = `${BASE}/api/Problems`;

async function toJsonOrThrow(res, ctx) {
  if (!res.ok) {
    const text = await res.text().catch(() => '');
    throw new Error(`${ctx} (HTTP ${res.status}) ${text}`.trim());
  }
  return res.json();
}

function pickArray(payload) {
  if (Array.isArray(payload)) return payload;
  if (Array.isArray(payload?.items)) return payload.items;
  if (Array.isArray(payload?.data)) return payload.data;
  if (Array.isArray(payload?.result)) return payload.result;
  return [];
}

export async function fetchProblemsPage(page = 1, pageSize = 50) {
  const url = `${PROBLEMS_BASE}?page=${page}&pageSize=${pageSize}`;
  const res = await fetch(url, { headers: { Accept: 'application/json' } });
  const json = await toJsonOrThrow(res, `Error al obtener problemas de Productivo, página ${page}`);
  const arr = pickArray(json);

  // ayuda para depurar si viene vacío
  if (arr.length === 0) {
    console.warn('[fetchProblemsPage] Vacío. JSON recibido:', json);
  } else {
    console.debug('[fetchProblemsPage] Ejemplo problema:', arr[0]);
  }
  return arr;
}

// Si tienes endpoints específicos, ajusta aquí:
export async function fetchAllOpenProblemIds() {
  const url = `${PROBLEMS_BASE}/OpenProblemIds`;
  const res = await fetch(url, { headers: { Accept: 'application/json' } });
  const json = await toJsonOrThrow(res, 'Error al obtener OpenProblemIds');
  return pickArray(json);
}

export async function fetchProblemById(id) {
  const url = `${PROBLEMS_BASE}/${encodeURIComponent(id)}`;
  const res = await fetch(url, { headers: { Accept: 'application/json' } });
  const json = await toJsonOrThrow(res, `Error al obtener problema ${id}`);
  return json;
}