 // src/utils/jurisdiction.js
export function getJurisdictionObject(p) {
  // intenta varias rutas posibles (casing y nombres distintos)
  const j =
    p?.jurisdiction ??
    p?.Jurisdiction ??
    p?.jurisdiccion ??
    p?.jurisdiccionDto ??
    p?.jurisdictionDto ??
    null;

  // Si es string, normaliza a objeto
  if (typeof j === 'string') {
    const label = j.trim().toUpperCase();
    return {
      isTcs: label === 'TCS',
      label,
      score: undefined,
      version: undefined,
      classifiedAt: undefined,
    };
  }

  // Si es boolean en el root (algunas APIs lo exponen plano)
  if (typeof p?.isTcs === 'boolean') {
    return {
      isTcs: p.isTcs,
      label: p.isTcs ? 'TCS' : 'NO_TCS',
      score: p.score ?? undefined,
      version: p.version ?? undefined,
      classifiedAt: p.classifiedAt ?? undefined,
    };
  }

  // Si es un objeto, intenta leer sus campos mÃ¡s comunes
  if (j && typeof j === 'object') {
    const label =
      (j.label ?? j.Label ?? '').toString().trim().toUpperCase();
    const isTcs =
      typeof j.isTcs === 'boolean'
        ? j.isTcs
        : label
          ? label === 'TCS'
          : undefined;

    return {
      isTcs,
      label: label || (isTcs === true ? 'TCS' : isTcs === false ? 'NO_TCS' : ''),
      score: j.score ?? j.Score,
      version: j.version ?? j.Version,
      classifiedAt: j.classifiedAt ?? j.ClassifiedAt,
    };
  }

  // Si no hay nada reconocible
  return {
    isTcs: undefined,
    label: '',
    score: undefined,
    version: undefined,
    classifiedAt: undefined,
  };
}

export const esTCS = (p) => getJurisdictionObject(p).isTcs === true;
export const esNoTCS = (p) => getJurisdictionObject(p).isTcs === false;