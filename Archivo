// Normaliza texto para comparar (trim + upper)
static string Nx(string? s) => (s ?? "").Trim().ToUpperInvariant();

// Copia una fila completa (todas las columnas) de sourceRow a targetRow
static void CopyFullRow(ExcelWorksheet source, int sourceRow, ExcelWorksheet target, int targetRow, int totalCols)
{
    for (int c = 1; c <= totalCols; c++)
        target.Cells[targetRow, c].Value = source.Cells[sourceRow, c].Value;
}

// Crea hojas "Reglas: Sí" y "Reglas: No" en base a la hoja fuente
static void CreateRuleSheets(ExcelPackage package, string sourceSheetName = "Monitoreados")
{
    var src = package.Workbook.Worksheets[sourceSheetName];
    if (src == null || src.Dimension == null) return;

    int lastRow = src.Dimension.End.Row;
    int lastCol = src.Dimension.End.Column;

    // Buscar índices de columnas por encabezado
    int ColIndex(string header)
    {
        for (int c = 1; c <= lastCol; c++)
        {
            var h = Nx(src.Cells[1, c].Text);
            if (h == Nx(header)) return c;
        }
        return -1;
    }

    int colInventario    = ColIndex("Inventario Torres");
    int colMonitSO       = ColIndex("Aplica Monitoreo por SO");
    int colAplicaNombre  = ColIndex("Aplica por Nombre");
    int colEstadoOpCat   = ColIndex("Estado Operativo (Catálogo)");

    // Si falta cualquiera, no hacemos nada (evitamos crashes)
    if (colInventario < 0 || colMonitSO < 0 || colAplicaNombre < 0 || colEstadoOpCat < 0)
        return;

    // Crear/limpiar hojas destino
    var okSheetName  = "Reglas: Sí";
    var noSheetName  = "Reglas: No";

    if (package.Workbook.Worksheets[okSheetName] != null)
        package.Workbook.Worksheets.Delete(okSheetName);
    if (package.Workbook.Worksheets[noSheetName] != null)
        package.Workbook.Worksheets.Delete(noSheetName);

    var ok  = package.Workbook.Worksheets.Add(okSheetName);
    var nok = package.Workbook.Worksheets.Add(noSheetName);

    // Copiar encabezados a ambas
    CopyFullRow(src, 1, ok,  1, lastCol);
    CopyFullRow(src, 1, nok, 1, lastCol);

    int okRow  = 2;
    int nokRow = 2;

    // Recorremos todas las filas de datos
    for (int r = 2; r <= lastRow; r++)
    {
        var inv     = Nx(src.Cells[r, colInventario].Text);
        var monSO   = Nx(src.Cells[r, colMonitSO].Text);
        var porNom  = Nx(src.Cells[r, colAplicaNombre].Text);
        var estCat  = Nx(src.Cells[r, colEstadoOpCat].Text);

        bool cumple =
            inv   == "SI" &&
            monSO == "VERIFICAR" &&
            porNom== "SI" &&
            estCat== "OPERATIVO";

        if (cumple)
        {
            CopyFullRow(src, r, ok, okRow++, lastCol);
        }
        else
        {
            CopyFullRow(src, r, nok, nokRow++, lastCol);
        }
    }

    // Negrita encabezados
    ok.Cells[1, 1, 1, lastCol].Style.Font.Bold  = true;
    nok.Cells[1, 1, 1, lastCol].Style.Font.Bold = true;

    // Auto-ajuste de columnas (opcional)
    ok.Cells[ok.Dimension.Address].AutoFitColumns();
    nok.Cells[nok.Dimension.Address].AutoFitColumns();
}


------

public static void GenerateReport()
{
    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
    using var package = new ExcelPackage();

    CreateMonitoredSheet(package);
    CreateNoMatchCmdbServerSheet(package);

    // >>> AQUI: crea las 2 nuevas hojas a partir de "Monitoreados"
    CreateRuleSheets(package, "Monitoreados");

    var slaSheet = package.Workbook.Worksheets.Add("Calculo SLA");
    slaSheet.Cells["A1"].Value = "Métrica";
    slaSheet.Cells["B1"].Value = "Valor";
    slaSheet.Cells["A1:B1"].Style.Font.Bold = true;

    var fileInfo = new FileInfo("servers_with_entities.xlsx");
    package.SaveAs(fileInfo);
    Console.WriteLine("Excel file 'servers_with_entities.xlsx' has been created successfully.");
}

