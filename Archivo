private static void CreateExcepcionadosSheet(ExcelPackage package)
{
    // ===== Helpers internos =====
    string RemoveDiacritics(string s)
    {
        var norm = s.Normalize(System.Text.NormalizationForm.FormD);
        var sb = new System.Text.StringBuilder();
        foreach (var ch in norm)
        {
            if (System.Globalization.CharUnicodeInfo.GetUnicodeCategory(ch)
                != System.Globalization.UnicodeCategory.NonSpacingMark)
            {
                sb.Append(ch);
            }
        }
        return sb.ToString().Normalize(System.Text.NormalizationForm.FormC);
    }

    string NormHeader(string? s)
    {
        s = RemoveDiacritics((s ?? "")
            .Replace("(", " ")
            .Replace(")", " ")
            .Replace("_", " "));
        s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " ");
        return s.Trim().ToUpperInvariant();
    }

    string NormVal(string? s)
    {
        s = RemoveDiacritics(s ?? "");
        s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " ");
        return s.Trim().ToUpperInvariant();
    }

    int FindColFuzzy(ExcelWorksheet ws, params string[] headerHints)
    {
        var targets = headerHints.Select(NormHeader).ToList();
        if (ws.Dimension == null) return -1;

        int colCount = ws.Dimension.End.Column;
        for (int c = 1; c <= colCount; c++)
        {
            var h = NormHeader(ws.Cells[1, c].Text ?? "");
            if (targets.Any(t => h.Contains(t)))
                return c;
        }
        return -1;
    }

    // ============================================================
    // 1. Obtener hojas base
    // ============================================================
    var monitSheet = package.Workbook.Worksheets["Monitoreados"];
    var noMonitSheet = package.Workbook.Worksheets["No Monitoreados"]; // <-- ajusta si tu pestaña real tiene otro nombre

    if (monitSheet == null || monitSheet.Dimension == null)
    {
        Console.WriteLine("⚠ No se encontró la hoja 'Monitoreados' o está vacía. No se puede construir 'Excepcionados'.");
        return;
    }

    bool hasNoMonit = (noMonitSheet != null && noMonitSheet.Dimension != null);

    int monRowCount = monitSheet.Dimension.End.Row;
    int monColCount = monitSheet.Dimension.End.Column;

    // Columnas de Monitoreados
    int monColServerName = FindColFuzzy(monitSheet,
        "SERVER NAME", "HOSTNAME", "DISPLAY NAME");

    int monColInvTorres = FindColFuzzy(monitSheet,
        "INVENTARIO TORRES", "INVENTARIO DE TORRES", "INVENTARIO TORRE");

    int monColApSO = FindColFuzzy(monitSheet,
        "APLICA MONITOREO POR SO", "APLICA MONITOREO SO", "APLICA MONITOREO POR SO?");

    int monColApNom = FindColFuzzy(monitSheet,
        "APLICA POR NOMBRE", "APLICA X NOMBRE", "APLICA POR NOMBRE?");

    int monColEstadoCat = FindColFuzzy(monitSheet,
        "ESTADO OPERATIVO (CATALOGO)", "ESTADO OPERATIVO CATALOGO", "ESTADO OPERATIVO");

    int monColEsVirtual = FindColFuzzy(monitSheet,
        "ES VIRTUAL", "VIRTUAL", "ES_VIRTUAL");

    if (monColServerName < 0 || monColInvTorres < 0 ||
        monColApSO < 0 || monColApNom < 0 ||
        monColEstadoCat < 0 || monColEsVirtual < 0)
    {
        Console.WriteLine("⚠ No se encontraron todas las columnas necesarias en 'Monitoreados' para construir 'Excepcionados'.");
        return;
    }

    // Columnas de No Monitoreados (si existe esa hoja)
    int noMonRowCount = 0;
    int noMonColCount = 0;

    int noMonColServerName = -1;
    int noMonColInvTorres  = -1;
    int noMonColApNom      = -1;

    if (hasNoMonit)
    {
        noMonRowCount = noMonitSheet!.Dimension!.End.Row;
        noMonColCount = noMonitSheet.Dimension.End.Column;

        noMonColServerName = FindColFuzzy(noMonitSheet,
            "SERVER NAME", "HOSTNAME", "DISPLAY NAME");

        noMonColInvTorres = FindColFuzzy(noMonitSheet,
            "INVENTARIO TORRES", "INVENTARIO DE TORRES", "INVENTARIO TORRE");

        noMonColApNom = FindColFuzzy(noMonitSheet,
            "APLICA POR NOMBRE", "APLICA X NOMBRE", "APLICA POR NOMBRE?");

        if (noMonColServerName < 0)
        {
            Console.WriteLine("⚠ 'No Monitoreados' existe pero no tiene columna de ServerName. Fase C/D/E parcial.");
            hasNoMonit = false;
        }
    }

    // ============================================================
    // 2. Construir set de exclusión
    //    -> servidores que ya están en 'Reglas: SI' o 'Reglas CMDB: SI'
    // ============================================================
    var yaReglas = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

    var reglasSiSheet = package.Workbook.Worksheets["Reglas: SI"];
    if (reglasSiSheet != null && reglasSiSheet.Dimension != null)
    {
        int rsRowCount = reglasSiSheet.Dimension.End.Row;
        int rsColSrv   = FindColFuzzy(reglasSiSheet, "SERVER NAME", "HOSTNAME", "DISPLAY NAME");
        if (rsColSrv > 0)
        {
            for (int r = 2; r <= rsRowCount; r++)
            {
                var name = reglasSiSheet.Cells[r, rsColSrv].Text?.Trim();
                if (!string.IsNullOrWhiteSpace(name))
                    yaReglas.Add(name.ToUpperInvariant());
            }
        }
    }

    var reglasCmdbSiSheet = package.Workbook.Worksheets["Reglas CMDB: SI"];
    if (reglasCmdbSiSheet != null && reglasCmdbSiSheet.Dimension != null)
    {
        int rcRowCount = reglasCmdbSiSheet.Dimension.End.Row;
        int rcColSrv   = FindColFuzzy(reglasCmdbSiSheet, "SERVER NAME", "HOSTNAME", "DISPLAY NAME");
        if (rcColSrv > 0)
        {
            for (int r = 2; r <= rcRowCount; r++)
            {
                var name = reglasCmdbSiSheet.Cells[r, rcColSrv].Text?.Trim();
                if (!string.IsNullOrWhiteSpace(name))
                    yaReglas.Add(name.ToUpperInvariant());
            }
        }
    }

    // ============================================================
    // 3. Crear / resetear hoja destino 'Excepcionados'
    // ============================================================
    var dstName = "Excepcionados";
    if (package.Workbook.Worksheets[dstName] != null)
        package.Workbook.Worksheets.Delete(dstName);

    var dst = package.Workbook.Worksheets.Add(dstName);

    // usamos las columnas de Monitoreados como layout base
    for (int c = 1; c <= monColCount; c++)
    {
        dst.Cells[1, c].Value = monitSheet.Cells[1, c].Value;
        dst.Cells[1, c].Style.Font.Bold = true;
    }

    var falseSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
    {
        "FALSO", "FALSE", "NO", "0"
    };

    int outRow = 2;
    var yaIncluidos = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

    // ============================================================
    // FASE A:
    // - Estado Operativo = OPERATIVO
    // - Aplica por Nombre = NO
    // - Aplica Monitoreo por SO = VERIFICAR
    // - Inventario Torres = SI
    // - Es Virtual = FALSO
    // (Solo desde Monitoreados)
    // ============================================================
    for (int r = 2; r <= monRowCount; r++)
    {
        var rawSrv = monitSheet.Cells[r, monColServerName].Text?.Trim();
        if (string.IsNullOrWhiteSpace(rawSrv)) continue;

        var vInv   = NormVal(monitSheet.Cells[r, monColInvTorres].Text);
        var vSO    = NormVal(monitSheet.Cells[r, monColApSO].Text);
        var vNom   = NormVal(monitSheet.Cells[r, monColApNom].Text);
        var vEst   = NormVal(monitSheet.Cells[r, monColEstadoCat].Text);
        var vVirt  = NormVal(monitSheet.Cells[r, monColEsVirtual].Text);

        bool cEst   = vEst == "OPERATIVO";
        bool cNom   = vNom == "NO";
        bool cSOv   = vSO == "VERIFICAR";
        bool cInv   = vInv == "SI";
        bool cVirt  = falseSet.Contains(vVirt);

        if (cEst && cNom && cSOv && cInv && cVirt)
        {
            var srvUpper = rawSrv.ToUpperInvariant();
            if (!yaIncluidos.Contains(srvUpper))
            {
                for (int c = 1; c <= monColCount; c++)
                    dst.Cells[outRow, c].Value = monitSheet.Cells[r, c].Value;

                yaIncluidos.Add(srvUpper);
                outRow++;
            }
        }
    }

    // ============================================================
    // FASE B:
    // Monitoreados restantes con Inventario Torres = SI
    // (pero que no estén ya en Regla: SI / Regla CMDB: SI / Fase A)
    // ============================================================
    for (int r = 2; r <= monRowCount; r++)
    {
        var rawSrv = monitSheet.Cells[r, monColServerName].Text?.Trim();
        if (string.IsNullOrWhiteSpace(rawSrv)) continue;

        var srvUpper = rawSrv.ToUpperInvariant();
        if (yaIncluidos.Contains(srvUpper)) continue;
        if (yaReglas.Contains(srvUpper)) continue;

        var vInv = NormVal(monitSheet.Cells[r, monColInvTorres].Text);
        if (vInv == "SI")
        {
            for (int c = 1; c <= monColCount; c++)
                dst.Cells[outRow, c].Value = monitSheet.Cells[r, c].Value;

            yaIncluidos.Add(srvUpper);
            outRow++;
        }
    }

    // ============================================================
    // FASE C:
    // No Monitoreados CMDB con Inventario Torres = SI
    // (sin repetir, y saltando los que ya están en reglas)
    // ============================================================
    if (hasNoMonit && noMonColServerName >= 0 && noMonColInvTorres >= 0)
    {
        for (int r = 2; r <= noMonRowCount; r++)
        {
            var rawSrv = noMonitSheet!.Cells[r, noMonColServerName].Text?.Trim();
            if (string.IsNullOrWhiteSpace(rawSrv)) continue;

            var srvUpper = rawSrv.ToUpperInvariant();
            if (yaIncluidos.Contains(srvUpper)) continue;
            if (yaReglas.Contains(srvUpper)) continue;

            var vInv2 = NormVal(noMonitSheet.Cells[r, noMonColInvTorres].Text);
            if (vInv2 == "SI")
            {
                int maxColsToCopy = Math.Min(noMonColCount, monColCount);
                for (int c = 1; c <= maxColsToCopy; c++)
                    dst.Cells[outRow, c].Value = noMonitSheet.Cells[r, c].Value;

                yaIncluidos.Add(srvUpper);
                outRow++;
            }
        }
    }

    // ============================================================
    // FASE D:
    // Monitoreados con "Aplica por Nombre = NO"
    // (sin importar Inventario Torres, estado, etc.)
    // Pero:
    //   - no repetir
    //   - no incluir si ya están en reglas
    // ============================================================
    for (int r = 2; r <= monRowCount; r++)
    {
        var rawSrv = monitSheet.Cells[r, monColServerName].Text?.Trim();
        if (string.IsNullOrWhiteSpace(rawSrv)) continue;

        var srvUpper = rawSrv.ToUpperInvariant();
        if (yaIncluidos.Contains(srvUpper)) continue;
        if (yaReglas.Contains(srvUpper)) continue;

        var vNom = NormVal(monitSheet.Cells[r, monColApNom].Text);
        if (vNom == "NO")
        {
            for (int c = 1; c <= monColCount; c++)
                dst.Cells[outRow, c].Value = monitSheet.Cells[r, c].Value;

            yaIncluidos.Add(srvUpper);
            outRow++;
        }
    }

    // ============================================================
    // FASE E:
    // No Monitoreados CMDB con "Aplica por Nombre = NO"
    // (de nuevo, sin repetir y sin incluir los de reglas)
    // ============================================================
    if (hasNoMonit && noMonColServerName >= 0 && noMonColApNom >= 0)
    {
        for (int r = 2; r <= noMonRowCount; r++)
        {
            var rawSrv = noMonitSheet!.Cells[r, noMonColServerName].Text?.Trim();
            if (string.IsNullOrWhiteSpace(rawSrv)) continue;

            var srvUpper = rawSrv.ToUpperInvariant();
            if (yaIncluidos.Contains(srvUpper)) continue;
            if (yaReglas.Contains(srvUpper)) continue;

            var vNom2 = NormVal(noMonitSheet.Cells[r, noMonColApNom].Text);
            if (vNom2 == "NO")
            {
                int maxColsToCopy = Math.Min(noMonColCount, monColCount);
                for (int c = 1; c <= maxColsToCopy; c++)
                    dst.Cells[outRow, c].Value = noMonitSheet.Cells[r, c].Value;

                yaIncluidos.Add(srvUpper);
                outRow++;
            }
        }
    }

    // ============================================================
    // Ajuste visual
    // ============================================================
    if (dst.Dimension != null)
        dst.Cells[dst.Dimension.Address].AutoFitColumns();

    Console.WriteLine($"✔ Hoja 'Excepcionados' creada/actualizada con {outRow - 2} filas.");
}
  
De la pestaña Monitoreados quiero que me saques los que estan Estado Operativo (Catálogo) = "Operativos" y Inventario Torres = "Si", pero la condicon es que no me traigas los que me das en la pestaña de "Reglas  SI"
quiero que me traigas primero los Reglas si de la pestaña Momonitoreados que son 1833 y luego otra crea otra pestaña con los que sobran y no esten en la pestaña Reglas  SI con estas condiciones Estado Operativo (Catálogo) = "Operativos" y Inventario Torres = "Si"
