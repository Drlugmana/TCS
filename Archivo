using RestAPIDynatrace.ML.Clases;      // JurisdictionInput / JurisdictionPrediction
using RestAPIDynatrace.ML.Functions;   // MLModelInitializer.GetEngine()
using RestAPIDynatrace.Models;         // Problem, JurisdictionDto

namespace RestAPIDynatrace.ML.Functions
{
    public static class MLFunctions
    {
        private const string ModelVersion = "jurisdiction_model:1.0";

        // ---- 1) API nueva: recibe un Problem y devuelve JurisdictionDto
        public static JurisdictionDto ClassifyProblem(Problem p)
        {
            var engine = MLModelInitializer.GetEngine();

            // Usa EXACTAMENTE el texto con el que entrenaste el modelo robusto
            var fullText = BuildText(p);

            var pred = engine.Predict(new JurisdictionInput { Text = fullText });

            var label = (pred.PredictedLabel ?? "").ToUpperInvariant();
            bool isTcs = label == "TCS";

            // tomar Probability si viene; si no, max(Score)
            float score = pred.Probability;
            if ((pred.Score?.Length ?? 0) > 0)
                score = pred.Score.Max();

            return new JurisdictionDto
            {
                IsTcs = isTcs,
                Label = isTcs ? "TCS" : "NO_TCS",
                Score = score,
                Version = ModelVersion,
                ClassifiedAt = DateTimeOffset.UtcNow
            };
        }

        // ---- 2) Mant√©n compatibilidad con tu firma vieja (por t√≠tulo)
        // Devuelve "TCS" / "NO_TCS" para que no rompa llamadas antiguas
        public static string PredictIssue(string title)
        {
            var engine = MLModelInitializer.GetEngine();
            var pred = engine.Predict(new JurisdictionInput { Text = title ?? "" });
            return string.Equals(pred.PredictedLabel, "TCS", StringComparison.OrdinalIgnoreCase) ? "TCS" : "NO_TCS";
        }

        // ---- Helper: arma el texto como lo usaste en entrenamiento
        private static string BuildText(Problem p)
        {
            var parts = new List<string?>
            {
                p.Title,
                p.Details,          // o p.Description, seg√∫n tu modelo
                p.ImpactLevel,      // opcional
                p.Severity          // opcional
                // string.Join(' ', p.Tags ?? Enumerable.Empty<string>()) // si aplica
            };
            return string.Join(' ', parts.Where(s => !string.IsNullOrWhiteSpace(s))).Trim();
        }
    }
}




using System;
using System.IO;
using Microsoft.ML;
using RestAPIDynatrace.ML.Clases; // JurisdictionInput / JurisdictionPrediction

namespace RestAPIDynatrace.ML.Functions
{
    /// <summary>
    /// Inicializador simple (sin PredictionEnginePool).
    /// Crea un √∫nico PredictionEngine para inferencia.
    /// </summary>
    public static class MLModelInitializer
    {
        // üîß Ajusta la ruta si tu zip est√° en otro sitio
        private static readonly string _modelPath =
            Path.Combine(AppContext.BaseDirectory, "ML", "Models", "jurisdiction_model.zip");

        private static readonly MLContext _ml = new(seed: 0);
        private static PredictionEngine<JurisdictionInput, JurisdictionPrediction>? _engine;

        static MLModelInitializer()
        {
            // Carga el modelo y crea el PredictionEngine
            var model = _ml.Model.Load(_modelPath, out _);
            _engine = _ml.Model.CreatePredictionEngine<JurisdictionInput, JurisdictionPrediction>(model);
        }

        /// <summary>
        /// Devuelve el engine para predecir (usado por MLFunctions).
        /// </summary>
        public static PredictionEngine<JurisdictionInput, JurisdictionPrediction> GetEngine()
        {
            if (_engine is null)
                throw new InvalidOperationException("El modelo ML no fue inicializado correctamente.");
            return _engine;
        }
    }
}

