
private static void CreateFilteredByRulesSheet(
    ExcelPackage package,
    string sourceSheetName,
    string targetSheetName,
    Func<string,string,string,string,bool> rule // (invTorres, porSO, porNombre, estado) => bool
)
{
    var src = package.Workbook.Worksheets[sourceSheetName];
    if (src == null || src.Dimension == null) {
        Console.WriteLine($"‚ö†Ô∏è No se encontr√≥ la hoja '{sourceSheetName}'.");
        return;
    }

    int colCount = src.Dimension.End.Column;
    int rowCount = src.Dimension.End.Row;

    // Normalizadores robustos
    string RemoveDiacritics(string s)
    {
        var norm = s.Normalize(NormalizationForm.FormD);
        var sb = new StringBuilder();
        foreach (var ch in norm)
            if (System.Globalization.CharUnicodeInfo.GetUnicodeCategory(ch) != System.Globalization.UnicodeCategory.NonSpacingMark)
                sb.Append(ch);
        return sb.ToString().Normalize(NormalizationForm.FormC);
    }
    string NormHeader(string? s)
    {
        s = RemoveDiacritics((s ?? "").Replace("(", " ").Replace(")", " ").Replace("_", " "));
        s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " ");
        return s.Trim().ToUpperInvariant();
    }
    string NormVal(string? s)
    {
        s = RemoveDiacritics(s ?? "");
        s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " ");
        return s.Trim().ToUpperInvariant();
    }

    int FindColFuzzy(params string[] headerHints)
    {
        var targets = headerHints.Select(NormHeader).ToList();
        for (int c = 1; c <= colCount; c++)
        {
            var h = NormHeader(src.Cells[1, c].Text);
            if (targets.Any(t => h.Contains(t))) return c;
        }
        return -1;
    }

    int colInventarioTorres   = FindColFuzzy("INVENTARIO TORRES");
    int colAplicaPorSO        = FindColFuzzy("APLICA MONITOREO POR SO", "APLICA MONITOREO SO");
    int colAplicaPorNombre    = FindColFuzzy("APLICA POR NOMBRE");
    int colEstadoOperativoCat = FindColFuzzy("ESTADO OPERATIVO CATALOGO", "ESTADO OPERATIVO");

    if (colInventarioTorres < 0 || colAplicaPorSO < 0 || colAplicaPorNombre < 0 || colEstadoOperativoCat < 0)
    {
        Console.WriteLine("‚ö†Ô∏è No se encontraron todas las columnas requeridas.");
        return;
    }

    var dst = package.Workbook.Worksheets.Add(targetSheetName);

    // Copiar encabezados
    for (int c = 1; c <= colCount; c++)
    {
        dst.Cells[1, c].Value = src.Cells[1, c].Value;
        dst.Cells[1, c].Style.Font.Bold = true;
    }

    int outRow = 2, escritos = 0;
    for (int r = 2; r <= rowCount; r++)
    {
        string invTorres = NormVal(src.Cells[r, colInventarioTorres].Text);
        string porSO     = NormVal(src.Cells[r, colAplicaPorSO].Text);
        string porNombre = NormVal(src.Cells[r, colAplicaPorNombre].Text);
        string estado    = NormVal(src.Cells[r, colEstadoOperativoCat].Text);

        if (rule(invTorres, porSO, porNombre, estado))
        {
            for (int c = 1; c <= colCount; c++)
                dst.Cells[outRow, c].Value = src.Cells[r, c].Value;
            outRow++;
            escritos++;
        }
    }

    Console.WriteLine($"üü¢ Hoja '{targetSheetName}' creada con {escritos} filas.");
}




------

CreateFilteredByRulesSheet(
    package,
    "Monitoreados",
    "Reglas: SI",
    (inv, so, nom, est) => inv=="SI" && so=="VERIFICAR" && nom=="SI" && est=="OPERATIVO"
);

------

CreateFilteredByRulesSheet(
    package,
    "No Monitoreados Cmdb",
    "Reglas CMDB: SI",
    (inv, so, nom, est) => inv=="SI" && so=="SI" && nom=="SI" && est=="OPERATIVO"
);


-----


CreateMonitoredSheet(package);
CreateNoMatchCmdbServerSheet(package);

// Monitoreados ‚Üí Reglas: SI
CreateFilteredByRulesSheet(package, "Monitoreados", "Reglas: SI",
    (inv, so, nom, est) => inv=="SI" && so=="VERIFICAR" && nom=="SI" && est=="OPERATIVO");

// No Monitoreados Cmdb ‚Üí Reglas CMDB: SI
CreateFilteredByRulesSheet(package, "No Monitoreados Cmdb", "Reglas CMDB: SI",
    (inv, so, nom, est) => inv=="SI" && so=="SI" && nom=="SI" && est=="OPERATIVO");