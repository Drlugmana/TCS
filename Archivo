
import React, { useEffect, useState } from 'react';
import { getSlaMinutes, getColorByPercent, getButtonColorByPercent, calcularCriticidad } from '../utils/jurisdiction';

// Componente principal que muestra cada tarjeta de problema
export default function ProblemCard({ problem, username }) {
  if (!problem) return null;

  // Desestructuración de datos
  const {
    title = '(sin título)',
    severityLevel = '',
    impactLevel = '',
    startTime,
    environment = '',
    affectedCI = [],
    tenant = '',
    problemId = '',
    jurisdiction = null
  } = problem;

  // Determina si pertenece a TCS o no
  const isTcs = typeof jurisdiction === 'string'
    ? jurisdiction.toUpperCase() === 'TCS'
    : jurisdiction?.isTcs === true;

  const confidence = typeof jurisdiction?.confidence === 'number' ? jurisdiction.confidence : null;

  // Estilo del badge TCS / NO TCS
  const badgeStyle = {
    padding: '0.25rem 0.5rem',
    borderRadius: '999px',
    fontSize: '0.8rem',
    fontWeight: 700,
    backgroundColor: isTcs ? '#1b5e20' : '#b71c1c',
    color: '#fff',
    marginRight: '0.5rem'
  };

  // Cálculo de criticidad y rutas de íconos
  const criticidad = calcularCriticidad(affectedCI);
  const criticidadIcon = `/severidad${criticidad}.svg`;
  const environmentIcon = environment === 'Productivo'
    ? '/icon-productivo.svg'
    : '/icon-noproductivo.svg';

  // Control del temporizador SLA
  const slaMinutes = getSlaMinutes(criticidad);
  const start = startTime ? new Date(startTime) : new Date();
  const [now, setNow] = useState(new Date());

  useEffect(() => {
    const i = setInterval(() => setNow(new Date()), 1000);
    return () => clearInterval(i);
  }, []);

  const elapsedMinutes = (now - start) / 60000;
  const remainingMinutes = Math.max(slaMinutes - elapsedMinutes, 0);
  const percentRemaining = Math.max((remainingMinutes / slaMinutes) * 100, 0);

  const bgColor = getColorByPercent(percentRemaining);
  const buttonColor = getButtonColorByPercent(percentRemaining);

  // Formato del temporizador HH:mm:ss
  const formatTime = (minutes) => {
    const totalSeconds = Math.floor(minutes * 60);
    const hrs = Math.floor(totalSeconds / 3600);
    const mins = Math.floor((totalSeconds % 3600) / 60);
    const secs = totalSeconds % 60;
    return `${String(hrs).padStart(2, '0')}:${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
  };

  // Equipos afectados
  const uniqueNames = [...new Set((affectedCI || []).map(ci => ci?.name).filter(Boolean))];
  const equipos = uniqueNames.join(', ') || '—';

  // Botón Dynatrace
  const isDisabled = !username;
  const dynatraceUrl = tenant
    ? `https://${tenant}.live.dynatrace.com/#problems/problemdetails;pid=${problemId}`
    : null;

  // Render de la tarjeta
  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        borderRadius: '12px',
        padding: '1rem',
        marginBottom: '1rem',
        background: bgColor,
        boxShadow: '0 4px 10px rgba(0,0,0,0.1)'
      }}
    >
      {/* Columna izquierda: íconos */}
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '0.5rem' }}>
        <img src={criticidadIcon} alt={`S${criticidad}`} width="40" height="40" title={`Criticidad S${criticidad}`} />
        <img src={environmentIcon} alt={environment} width="36" height="36" title={environment} />
      </div>

      {/* Centro: Información del problema */}
      <div style={{ flex: 1, paddingLeft: '1rem' }}>
        <div style={{ display: 'flex', alignItems: 'center', marginBottom: 8 }}>
          <span style={badgeStyle}>{isTcs ? 'TCS' : 'NO TCS'}</span>
          {typeof confidence === 'number' && (
            <span style={{ opacity: 0.75 }}>
              Confianza: <strong>{(confidence * 100).toFixed(1)}%</strong>
            </span>
          )}
        </div>

        <p style={{ margin: 0 }}><strong>Título:</strong> {title}</p>
        <p style={{ margin: 0 }}><strong>Severidad Dynatrace:</strong> {severityLevel}</p>
        <p style={{ margin: 0 }}><strong>Impacto:</strong> {impactLevel}</p>
        <p style={{ margin: 0 }}><strong>Inicio:</strong> {start.toLocaleString()}</p>
        <p style={{ margin: 0 }}><strong>Criticidad CI:</strong> {criticidad}</p>
        <p style={{ margin: 0 }}><strong>Equipos afectados:</strong> {equipos}</p>
      </div>

      {/* Derecha: Temporizador + botón */}
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '2rem', fontWeight: 'bold' }}>
          {formatTime(remainingMinutes)}
        </div>

        <button
          disabled={isDisabled || !dynatraceUrl}
          onClick={() => dynatraceUrl && window.open(dynatraceUrl, '_blank')}
          style={{
            marginTop: '0.5rem',
            padding: '0.5rem 1rem',
            border: 'none',
            borderRadius: '6px',
            color: '#fff',
            background: isDisabled ? '#808080' : buttonColor,
            cursor: isDisabled ? 'not-allowed' : 'pointer'
          }}
        >
          Revisar problema
        </button>
      </div>
    </div>
  );
}