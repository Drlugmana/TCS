private static List<Tag> DeserializeTagsSafe(string raw)
{
    // Lista vac√≠a si viene null/empty
    if (string.IsNullOrWhiteSpace(raw))
        return new List<Tag>();

    var s = raw.Trim();

    // Si parece JSON (array u objeto), intentamos deserializar
    if (s.StartsWith("[") || s.StartsWith("{"))
    {
        try
        {
            var parsed = JsonConvert.DeserializeObject<List<Tag>>(s);
            return parsed ?? new List<Tag>();
        }
        catch
        {
            // Si falla, caemos al parseo flexible abajo
        }
    }

    // --- Fallback: convierte formatos sueltos como "k:v,k2:v2" o texto plano ---
    var list = new List<Tag>();
    var parts = s.Split(new[] { ',', ';', '|', '\n' }, StringSplitOptions.RemoveEmptyEntries);

    foreach (var part in parts)
    {
        var token = part.Trim();
        var kv = token.Split(new[] { ':' }, 2);

        if (kv.Length == 2)
        {
            list.Add(new Tag
            {
                Key = kv[0].Trim(),
                Value = kv[1].Trim()
            });
        }
        else
        {
            // Si no hay ":", guardamos el texto como valor bruto
            list.Add(new Tag
            {
                Key = "raw",
                Value = token
            });
        }
    }

    return list;
}
