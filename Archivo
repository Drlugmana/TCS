
// Normaliza texto de encabezado (para buscar columnas por nombre aunque escriban distinto)
private static string NormalizeHeader(string s)
{
    if (s == null) return "";
    s = s.Trim().ToUpperInvariant();
    s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " "); // colapsa espacios
    s = s.Replace("_", " ");
    return s;
}

// Devuelve el índice de la primera columna cuyo encabezado "se parece"
// a cualquiera de los hints pasados
private static int FindColumnByHeader(ExcelWorksheet ws, params string[] hints)
{
    if (ws?.Dimension == null) return -1;
    var targets = hints
        .Select(h => NormalizeHeader(h))
        .ToList();

    int colCount = ws.Dimension.End.Column;
    for (int c = 1; c <= colCount; c++)
    {
        var head = NormalizeHeader(ws.Cells[1, c].Text);
        if (targets.Any(t => head.Contains(t)))
            return c;
    }
    return -1;
}

// Normaliza valores de celdas tipo "si", "Si", "VERIFICAR ", etc.
private static string NormVal(string s)
{
    if (string.IsNullOrWhiteSpace(s)) return "";
    s = s.Trim().ToUpperInvariant();
    s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " ");
    return s;
}

-----

private static void CreateExcepcionadosMonitoreadosSheet(ExcelPackage package)
{
    var src = package.Workbook.Worksheets["Monitoreados"];
    if (src == null || src.Dimension == null)
    {
        Console.WriteLine("⚠ No existe hoja 'Monitoreados', no se crea 'Excepcionados Monitoreados'.");
        return;
    }

    // ubicar columnas clave dentro de Monitoreados
    int colInvTorres = FindColumnByHeader(src, "INVENTARIO TORRES", "INVENTARIO DE TORRES");
    int colApNom     = FindColumnByHeader(src, "APLICA POR NOMBRE");
    // si alguna falta, igual seguimos con lo que haya (pero sin condición no va a sacar nada)
    // puedes volverlo obligatorio si quieres.

    // crear / limpiar hoja destino
    const string dstName = "Excepcionados Monitoreados";
    if (package.Workbook.Worksheets[dstName] != null)
        package.Workbook.Worksheets.Delete(dstName);
    var dst = package.Workbook.Worksheets.Add(dstName);

    // copiar encabezados completos 1:1
    int colCount = src.Dimension.End.Column;
    for (int c = 1; c <= colCount; c++)
    {
        dst.Cells[1, c].Value = src.Cells[1, c].Value;
        dst.Cells[1, c].Style.Font.Bold = true;
    }

    int outRow = 2;
    int lastRow = src.Dimension.End.Row;

    for (int r = 2; r <= lastRow; r++)
    {
        string vInvTorres = colInvTorres > 0 ? NormVal(src.Cells[r, colInvTorres].Text) : "";
        string vApNom     = colApNom     > 0 ? NormVal(src.Cells[r, colApNom    ].Text) : "";

        bool condInventario = (vInvTorres == "SI");
        bool condApNomNo    = (vApNom == "NO");

        // si cumple cualquiera de las dos razones de excepción
        if (condInventario || condApNomNo)
        {
            for (int c = 1; c <= colCount; c++)
            {
                dst.Cells[outRow, c].Value = src.Cells[r, c].Value;
            }
            outRow++;
        }
    }

    if (dst.Dimension != null)
        dst.Cells[dst.Dimension.Address].AutoFitColumns();

    Console.WriteLine($"Hoja '{dstName}' creada con {outRow - 2} filas.");
}


-----


private static void CreateExcepcionadosNoMonitoreadosSheet(ExcelPackage package)
{
    var src = package.Workbook.Worksheets["No Monitoreados CMDB"];
    if (src == null || src.Dimension == null)
    {
        Console.WriteLine("⚠ No existe hoja 'No Monitoreados CMDB', no se crea 'Excepcionados No Monitoreados'.");
        return;
    }

    // ubicar columnas clave en No Monitoreados CMDB
    int colInvTorres = FindColumnByHeader(src, "INVENTARIO TORRES", "INVENTARIO DE TORRES");
    int colApNom     = FindColumnByHeader(src, "APLICA POR NOMBRE");

    // crear / limpiar hoja destino
    const string dstName = "Excepcionados No Monitoreados";
    if (package.Workbook.Worksheets[dstName] != null)
        package.Workbook.Worksheets.Delete(dstName);
    var dst = package.Workbook.Worksheets.Add(dstName);

    // copiar encabezados completos 1:1
    int colCount = src.Dimension.End.Column;
    for (int c = 1; c <= colCount; c++)
    {
        dst.Cells[1, c].Value = src.Cells[1, c].Value;
        dst.Cells[1, c].Style.Font.Bold = true;
    }

    int outRow = 2;
    int lastRow = src.Dimension.End.Row;

    for (int r = 2; r <= lastRow; r++)
    {
        string vInvTorres = colInvTorres > 0 ? NormVal(src.Cells[r, colInvTorres].Text) : "";
        string vApNom     = colApNom     > 0 ? NormVal(src.Cells[r, colApNom    ].Text) : "";

        bool condInventario = (vInvTorres == "SI");
        bool condApNomNo    = (vApNom == "NO");

        if (condInventario || condApNomNo)
        {
            for (int c = 1; c <= colCount; c++)
            {
                dst.Cells[outRow, c].Value = src.Cells[r, c].Value;
            }
            outRow++;
        }
    }

    if (dst.Dimension != null)
        dst.Cells[dst.Dimension.Address].AutoFitColumns();

    Console.WriteLine($"Hoja '{dstName}' creada con {outRow - 2} filas.");
}

----

CreateExcepcionadosMonitoreadosSheet(package);
CreateExcepcionadosNoMonitoreadosSheet(package);