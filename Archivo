// src/components/ProblemCard.jsx
import React, { useEffect, useState } from 'react';
import {
  getSlaMinutes,
  getColorByPercent,
  getButtonColorByPercent,
  calcularCriticidad
} from '../utils/slaUtils';

export default function ProblemCard({ problem, username }) {
  if (!problem) return null;

  const {
    title = '(sin título)',
    severityLevel = '',
    impactLevel = '',
    startTime,
    environment = '',
    affectedCI = [],
    tenant = '',
    problemId = '',
    jurisdiction = null,
    label: labelIn,
    isTcs: isTcsIn,
    juris
  } = problem;

  // TCS / NO TCS robusto (sin depender del backend exacto)
  const isTcs =
    isTcsIn ??
    jurisdiction?.isTcs ??
    (typeof juris === 'string' ? juris.toUpperCase() === 'TCS' : undefined) ??
    (typeof labelIn === 'string' ? labelIn.toUpperCase() === 'TCS' : undefined) ??
    false;

  const label = labelIn ?? jurisdiction?.label ?? (isTcs ? 'TCS' : 'NO TCS');

  // Criticidad e íconos
  const criticidad = calcularCriticidad(affectedCI);
  const criticidadIcon = `/severidad${String(criticidad).replace('S','')}.svg`; // asume public/severidad1.svg, etc.
  const environmentIcon = environment === 'Productivo' ? '/icon-productivo.svg' : '/icon-noproductivo.svg';

  // Timer SLA
  const slaMinutes = getSlaMinutes(criticidad);
  const start = startTime ? new Date(startTime) : new Date();
  const [now, setNow] = useState(new Date());
  useEffect(() => { const id = setInterval(() => setNow(new Date()), 1000); return () => clearInterval(id); }, []);
  const elapsedMinutes = Math.max((now - start) / 60000, 0);
  const remainingMinutes = Math.max(slaMinutes - elapsedMinutes, 0);
  const percentRemaining = Math.min((remainingMinutes / (slaMinutes || 1)) * 100, 100);
  const bgColor = getColorByPercent(percentRemaining);
  const buttonColor = getButtonColorByPercent(percentRemaining);

  const formatTime = (minutes) => {
    const total = Math.floor(minutes * 60);
    const h = Math.floor(total / 3600);
    const m = Math.floor((total % 3600) / 60);
    const s = total % 60;
    return `${String(h).padStart(2,'0')}:${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`;
  };

  const equipos = [...new Set((affectedCI || []).map(ci => ci?.name).filter(Boolean))].join(', ') || '—';
  const dynatraceUrl = tenant ? `https://${tenant}.live.dynatrace.com/#problems/problemdetails;pid=${problemId}` : null;
  const disabled = !username || !dynatraceUrl;

  return (
    <div
      style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        borderRadius: '12px',
        padding: '1rem',
        marginBottom: '1rem',
        background: bgColor,
        boxShadow: '0 4px 10px rgba(0,0,0,0.1)'
      }}
    >
      {/* Iconos */}
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '0.5rem' }}>
        <img src={criticidadIcon} alt={`S${criticidad}`} width="40" height="40" title={`Criticidad ${criticidad}`} />
        <img src={environmentIcon} alt={environment} width="36" height="36" title={environment} />
      </div>

      {/* Info */}
      <div style={{ flex: 1, paddingLeft: '1rem' }}>
        <div style={{ display: 'flex', alignItems: 'center', marginBottom: 8 }}>
          <span style={{
            padding: '0.25rem 0.5rem',
            borderRadius: '999px',
            fontSize: '0.8rem',
            fontWeight: 700,
            backgroundColor: isTcs ? '#1b5e20' : '#b71c1c',
            color: '#fff',
            marginRight: '0.5rem'
          }}>
            {label}
          </span>
        </div>

        <p style={{ margin: 0 }}><strong>Título:</strong> {title}</p>
        <p style={{ margin: 0 }}><strong>Severidad Dynatrace:</strong> {severityLevel}</p>
        <p style={{ margin: 0 }}><strong>Impacto:</strong> {impactLevel}</p>
        <p style={{ margin: 0 }}><strong>Inicio:</strong> {start.toLocaleString()}</p>
        <p style={{ margin: 0 }}><strong>Criticidad CI:</strong> {criticidad}</p>
        <p style={{ margin: 0 }}><strong>Equipos afectados:</strong> {equipos}</p>
      </div>

      {/* Timer + botón */}
      <div style={{ textAlign: 'center' }}>
        <div style={{ fontSize: '2rem', fontWeight: 'bold' }}>{formatTime(remainingMinutes)}</div>
        <button
          disabled={disabled}
          onClick={() => !disabled && window.open(dynatraceUrl, '_blank')}
          style={{
            marginTop: '0.5rem',
            padding: '0.5rem 1rem',
            border: 'none',
            borderRadius: '6px',
            color: '#fff',
            background: disabled ? '#808080' : buttonColor,
            cursor: disabled ? 'not-allowed' : 'pointer'
          }}
          title={!username ? 'Ingresa tu usuario para habilitar' : 'Abrir en Dynatrace'}
        >
          Revisar problema
        </button>
      </div>
    </div>
  );
}
