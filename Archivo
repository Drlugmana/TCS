using Azure;
using Azure.Core;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using OfficeOpenXml;
using ReporteCoberturaSLA.DAL;
using ReporteCoberturaSLA.Models.Cmdb;
using ReporteCoberturaSLA.Models.Config;
using ReporteCoberturaSLA.Models.EntityModels;
using System;
using System.Collections.Concurrent;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using static System.Runtime.InteropServices.JavaScript.JSType;



namespace ReporteCoberturaSLA
{
    class Program
    {
        private static string _connectionString = string.Empty;
        private static ApiCmdbSettings _apiSettings = new ApiCmdbSettings();
        private static List<ServerWithEntities> _serversWithEntities = new List<ServerWithEntities>();
        private static List<Server> _serversNoMatch = new List<Server>();
        private static List<EntitySchema> _serversNoMatchDyn = new List<EntitySchema>();

        public static async Task Main(string[] args)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            LoadConfig();
            Console.WriteLine("Obteniendo lista de servidores de la cmdb");
            var serverList = await GetCmdbServersList();
            Console.WriteLine($"Se encontraron {serverList.Count} servidores en la cmdb");
            Console.WriteLine("Realizando cruce de datos para generacion de reporte");
            await MatchEntitiesInfo(serverList);
            Console.Write($"Se han detectado {_serversWithEntities.Count} entidades monitoreadas por Dynatrace y registradas en la CMDB");
            GenerateReport();
        }

        public static void LoadConfig()
        {
            var configuration = new ConfigurationBuilder()
                 .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                 .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                 .Build();
            _connectionString = configuration.GetConnectionString("Connection");
            configuration.GetSection("ApiCmdb").Bind(_apiSettings);
        }
        public static async Task<List<Server>> GetCmdbServersList()
        {
            using var httpClient = new HttpClient
            {
                Timeout = TimeSpan.FromMinutes(5) // ‚è± ahora espera hasta 5 minutos
            };

            int maxRetries = 3;        // üîÑ n√∫mero de reintentos
            int delaySeconds = 5;      // ‚è≥ espera entre intentos

            for (int intento = 1; intento <= maxRetries; intento++)
            {
                try
                {
                    var byteArray = Encoding.ASCII.GetBytes($"{_apiSettings.User}:{_apiSettings.Password}");
                    httpClient.DefaultRequestHeaders.Authorization =
                        new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));
                    httpClient.DefaultRequestHeaders.Accept.Clear();
                    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                    Console.WriteLine($"Intento {intento} de {maxRetries} para obtener la lista de servidores CMDB...");

                    HttpResponseMessage response = await httpClient.GetAsync(_apiSettings.Url);

                    if (response.IsSuccessStatusCode)
                    {
                        string responseBody = await response.Content.ReadAsStringAsync();
                        var apiResponse = JsonConvert.DeserializeObject<CmdbResponse>(responseBody);
                        var serverList = apiResponse?.Result ?? new List<Server>();

                        return serverList;
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå Error HTTP {response.StatusCode} en intento {intento}");
                    }
                }
                catch (TaskCanceledException ex)
                {
                    Console.WriteLine($"‚è± Timeout en intento {intento}: {ex.Message}");
                    if (intento == maxRetries) throw;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Error en intento {intento}: {ex.Message}");
                    if (intento == maxRetries) throw;
                }

                // Espera antes de reintentar
                Console.WriteLine($"üîÑ Esperando {delaySeconds} segundos antes del reintento...");
                await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
            }

            return new List<Server>(); // si todo falla, retorna lista vac√≠a
        }
         
        public static async Task MatchEntitiesInfo(List<Server> serverList)
        {
            EntitiesDB entitiesDB = new EntitiesDB(_connectionString);
            var entitiesList = await entitiesDB.GetEntities();

            var normalizedEntities = new ConcurrentDictionary<string, List<EntitySchema>>(StringComparer.OrdinalIgnoreCase);

            foreach (var kvp in entitiesList)
            {
                // Key completa tal cual llega de Dynatrace (FQDN si lo hay)
                var fullKey = (kvp.Key ?? string.Empty).Trim();
                if (!string.IsNullOrWhiteSpace(fullKey))
                    normalizedEntities.AddOrUpdate(fullKey, _ => kvp.Value, (_, existing) => existing);

                // Key corta (sin dominio) para match flexible
                var shortKey = fullKey.Split('.')[0];
                if (!string.IsNullOrWhiteSpace(shortKey))
                    normalizedEntities.AddOrUpdate(shortKey, _ => kvp.Value, (_, existing) => existing);
            }

            Parallel.ForEach(serverList, server =>
            {
                if (!string.IsNullOrWhiteSpace(server.Name))
                {
                    var hostFull = server.Name.Trim();         // tal cual viene de CMDB
                    var hostShort = hostFull.Split('.')[0];     // sin dominio
                    bool matchFound = false;

                    if (normalizedEntities.TryGetValue(hostFull, out var matchedEntities) ||
                        normalizedEntities.TryGetValue(hostShort, out matchedEntities))
                    {
                        _serversWithEntities.Add(new ServerWithEntities
                        {
                            Server = server,
                            Entities = matchedEntities
                        });
                        matchFound = true;
                    }

                    if (!matchFound)
                        _serversNoMatch.Add(server);
                }

                Console.Write("Procesando servidores: {0}/{1}", serverList.IndexOf(server) + 1, serverList.Count);
            });

            foreach (var remainingEntities in normalizedEntities.Values)
            {
                foreach (var entity in remainingEntities)
                {
                    _serversNoMatchDyn.Add(entity);
                }
            }

            Console.WriteLine();
            Console.WriteLine($"Entidades match {_serversWithEntities.Count}");
            Console.WriteLine($"Entidades que no hicieron match en cmdb {_serversNoMatch.Count}");
            Console.WriteLine($"Entidades que no hicieron match en dynatrace {_serversNoMatchDyn.Count}");
        }


        public static void GenerateReport()
        {

            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using var package = new ExcelPackage();

            CreateMonitoredSheet(package);
            CreateNoMatchCmdbServerSheet(package);

            var slaSheet = package.Workbook.Worksheets.Add("Calculo SLA");
            slaSheet.Cells["A1"].Value = "M√©trica";
            slaSheet.Cells["B1"].Value = "Valor";
            slaSheet.Cells["A1:B1"].Style.Font.Bold = true;



            var fileInfo = new FileInfo("servers_with_entities.xlsx");
            package.SaveAs(fileInfo);
            Console.WriteLine("Excel file 'servers_with_entities.xlsx' has been created successfully.");
        }

        public static void CreateMonitoredSheet(ExcelPackage package)
        {
            var worksheet = package.Workbook.Worksheets.Add("Monitoreados");

            var headers = new[]
            {
                "Server Name", "Server Class", "Server Group",
                "Tenant", "Environment", "Entity Id", "Type",
                "Display Name", "First Seen", "Last Seen",
                "Installer Tracked Download", "Physical Memory",
                "Standalone", "Standalone Special AgentsOnly",
                "Logical Cpu Cores", "Is Monitoring Candidate",
                "Cpu Cores", "Memory Total", "Installer Support Alert",
                "Ip Address", "Management Zones", "Tags Key", "Tags String Representation",
                "Tags Value", "OS Type", "Detected Name", "State", "OneAgent Custom Host Name",
                "HypervisorType", "Bitness", "OS Architecture", "OS Version", "Installer Version",
                "Network Zone", "Auto Injection", "Monitoring Mode", "Host Group Name","Gestionado Por",
                "Es Virtual"
            };


            for (int i = 0; i < headers.Length; i++)
            {
                worksheet.Cells[1, i + 1].Value = headers[i];
                worksheet.Cells[1, i + 1].Style.Font.Bold = true;
            }

            int row = 2;


            foreach (var serverWithEntities in _serversWithEntities)
            {
                var server = serverWithEntities.Server;
                var latest = serverWithEntities.Entities.OrderByDescending(e => e.LastSeen).FirstOrDefault();

                // Nombre ‚Äútal cual Dynatrace‚Äù: OneAgent ‚Üí Detected ‚Üí Display
                string dynNameFull =
                    latest?.Properties?.OneAgentCustomHostName ??
                    latest?.Properties?.DetectedName ??
                    latest?.DisplayName ??
                    server?.Name; // fallback

                worksheet.Cells[row, 1].Value = dynNameFull.ToUpper();
                worksheet.Cells[row, 2].Value = server.Class;
                worksheet.Cells[row, 3].Value = server.Group;
                worksheet.Cells[row, 4].Value = latest.Tenant;
                worksheet.Cells[row, 5].Value = latest.Environment;
                worksheet.Cells[row, 6].Value = latest.EntityId;
                worksheet.Cells[row, 7].Value = latest.Type;
                worksheet.Cells[row, 8].Value = latest.DisplayName;
                worksheet.Cells[row, 9].Value = latest.FirstSeen;
                worksheet.Cells[row, 9].Style.Numberformat.Format = "dd/mm/yyyy HH:mm:ss";
                worksheet.Cells[row, 10].Value = latest.LastSeen;
                worksheet.Cells[row, 10].Style.Numberformat.Format = "dd/mm/yyyy HH:mm:ss";
                worksheet.Cells[row, 11].Value = latest.Properties?.InstallerTrackedDownload == true ? "Verdadero" : "Falso";
                worksheet.Cells[row, 12].Value = latest.Properties?.PhysicalMemory != null ? latest.Properties.PhysicalMemory.ToString() : "";
                worksheet.Cells[row, 13].Value = latest.Properties?.Standalone == true ? "Verdadero" : "Falso";
                worksheet.Cells[row, 14].Value = latest.Properties?.StandaloneSpecialAgentsOnly == true ? "Verdadero" : "Falso";
                worksheet.Cells[row, 15].Value = latest.Properties?.LogicalCpuCores != null ? latest.Properties.LogicalCpuCores.ToString() : "";
                worksheet.Cells[row, 16].Value = latest.Properties?.IsMonitoringCandidate == true ? "Verdadero" : "Falso";
                worksheet.Cells[row, 17].Value = latest.Properties?.CpuCores != null ? latest.Properties.CpuCores.ToString() : "";
                worksheet.Cells[row, 18].Value = latest.Properties?.MemoryTotal != null ? latest.Properties.MemoryTotal.ToString() : "";
                worksheet.Cells[row, 19].Value = latest.Properties?.InstallerSupportAlert == true ? "Verdadero" : "Falso";
                worksheet.Cells[row, 20].Value = string.Join(",", latest.Properties?.IpAddress ?? new List<string>());
                worksheet.Cells[row, 21].Value = string.Join(",", latest.ManagementZones?.Where(m => m.Name != null).Select(m => m.Name) ?? new List<string>());
                worksheet.Cells[row, 22].Value = string.Join(",", latest.Tags?.Where(t => t.Key != null).Select(t => t.Key) ?? new List<string>());
                worksheet.Cells[row, 23].Value = string.Join(",", latest.Tags?.Where(t => t.StringRepresentation != null).Select(t => t.StringRepresentation) ?? new List<string>());
                worksheet.Cells[row, 24].Value = string.Join(",", latest.Tags?.Where(t => t.Value != null).Select(t => t.Value) ?? new List<string>());
                worksheet.Cells[row, 25].Value = latest.Properties?.OsType ?? "";
                worksheet.Cells[row, 26].Value = latest.Properties?.DetectedName ?? "";
                worksheet.Cells[row, 27].Value = latest.Properties?.State ?? "";
                worksheet.Cells[row, 28].Value = latest.Properties?.OneAgentCustomHostName ?? "";
                worksheet.Cells[row, 29].Value = latest.Properties?.HypervisorType ?? "";
                worksheet.Cells[row, 30].Value = latest.Properties?.Bitness ?? "";
                worksheet.Cells[row, 31].Value = latest.Properties?.OsArchitecture ?? "";
                worksheet.Cells[row, 32].Value = latest.Properties?.OsVersion ?? "";
                worksheet.Cells[row, 33].Value = latest.Properties?.InstallerVersion ?? "";
                worksheet.Cells[row, 34].Value = latest.Properties?.NetworkZone ?? "";
                worksheet.Cells[row, 35].Value = latest.Properties?.AutoInjection ?? "";
                worksheet.Cells[row, 36].Value = latest.Properties?.MonitoringMode ?? "";
                worksheet.Cells[row, 37].Value = latest.Properties?.HostGroupName ?? "";
                worksheet.Cells[row, 38].Value = server.Managed;
                worksheet.Cells[row, 39].Value = server.Virtual;    

                row++;
            }
        }

        public static void CreateNoMatchCmdbServerSheet(ExcelPackage package)
        {
            var worksheet = package.Workbook.Worksheets.Add("No Monitoreados Cmdb");
            var headers = new[]
            {
                "Server Name", "Server Class", "Server Group","Operational State",
                "Environment", "Related Application", "Owned By", "Manufacturer" ,
                "Sistema Operativo","Version Sistema Operativo","Gestionado Por","Es Virtual"


            };

            for (int i = 0; i < headers.Length; i++)
            {
                worksheet.Cells[1, i + 1].Value = headers[i];
                worksheet.Cells[1, i + 1].Style.Font.Bold = true;
            }

          
            int rowIndex = 2;
            foreach (var server in _serversNoMatch)
            {
                

                worksheet.Cells[rowIndex, 1].Value = server.Name;
                worksheet.Cells[rowIndex, 2].Value = server.Class;
                worksheet.Cells[rowIndex, 3].Value = server.Group;
                worksheet.Cells[rowIndex, 4].Value = server.OperationalState;
                worksheet.Cells[rowIndex, 5].Value = server.Environment;
                worksheet.Cells[rowIndex, 6].Value = server.RelatedApplication;
                worksheet.Cells[rowIndex, 7].Value = server.OwnedBy;
                worksheet.Cells[rowIndex, 8].Value = server.Manufacturer;
                worksheet.Cells[rowIndex, 9].Value = server.SistemaOperativo;
                worksheet.Cells[rowIndex, 10].Value = server.VersionSistemaOperativo;
                worksheet.Cells[rowIndex, 11].Value = server.Managed;
                worksheet.Cells[rowIndex, 12].Value = server.Virtual;
             
                rowIndex++;
            }
        }
      
    }
}

